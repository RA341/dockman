// @generated by protoc-gen-es v2.7.0 with parameter "target=ts"
// @generated from file docker/v1/docker.proto (package docker.v1, syntax proto3)
/* eslint-disable */

import type {GenEnum, GenFile, GenMessage, GenService} from "@bufbuild/protobuf/codegenv2";
import {enumDesc, fileDesc, messageDesc, serviceDesc} from "@bufbuild/protobuf/codegenv2";
import type {Message} from "@bufbuild/protobuf";

/**
 * Describes the file docker/v1/docker.proto.
 */
export const file_docker_v1_docker: GenFile = /*@__PURE__*/
    fileDesc("ChZkb2NrZXIvdjEvZG9ja2VyLnByb3RvEglkb2NrZXIudjEiPQoVQ29udGFpbmVyRXhlY0NtZElucHV0Eg8KB3VzZXJDbWQYASABKAkSEwoLY29udGFpbmVySUQYAiABKAkiPAoUQ29udGFpbmVyRXhlY1JlcXVlc3QSEwoLY29udGFpbmVySUQYASABKAkSDwoHZXhlY0NtZBgCIAMoCSK2AgoFSW1hZ2USEgoKY29udGFpbmVycxgBIAEoAxIPCgdjcmVhdGVkGAIgASgDEgoKAmlkGAMgASgJEiwKBmxhYmVscxgEIAMoCzIcLmRvY2tlci52MS5JbWFnZS5MYWJlbHNFbnRyeRIRCglwYXJlbnRfaWQYBSABKAkSLQoJbWFuaWZlc3RzGAcgAygLMhouZG9ja2VyLnYxLk1hbmlmZXN0U3VtbWFyeRIUCgxyZXBvX2RpZ2VzdHMYCCADKAkSEQoJcmVwb190YWdzGAkgAygJEhMKC3NoYXJlZF9zaXplGAogASgDEgwKBHNpemUYCyABKAMSEQoJdXBkYXRlUmVmGAwgASgJGi0KC0xhYmVsc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEiQwoPTWFuaWZlc3RTdW1tYXJ5Eg4KBmRpZ2VzdBgBIAEoCRISCgptZWRpYV90eXBlGAIgASgJEgwKBHNpemUYAyABKAMiEwoRTGlzdEltYWdlc1JlcXVlc3QihAEKEkxpc3RJbWFnZXNSZXNwb25zZRIWCg50b3RhbERpc2tVc2FnZRgBIAEoAxIYChB1bnVzZWRJbWFnZUNvdW50GAIgASgDEhoKEnVudGFnZ2VkSW1hZ2VDb3VudBgDIAEoAxIgCgZpbWFnZXMYBCADKAsyEC5kb2NrZXIudjEuSW1hZ2UiJgoSUmVtb3ZlSW1hZ2VSZXF1ZXN0EhAKCGltYWdlSWRzGAEgAygJIhUKE1JlbW92ZUltYWdlUmVzcG9uc2UiVwoSSW1hZ2VQcnVuZVJlc3BvbnNlEhYKDlNwYWNlUmVjbGFpbWVkGAEgASgEEikKB2RlbGV0ZWQYAiADKAsyGC5kb2NrZXIudjEuSW1hZ2VzRGVsZXRlZCIlChFJbWFnZVBydW5lUmVxdWVzdBIQCghwcnVuZUFsbBgBIAEoCCIyCg1JbWFnZXNEZWxldGVkEg8KB0RlbGV0ZWQYASABKAkSEAoIVW50YWdnZWQYAiABKAkioQEKBlZvbHVtZRIMCgRuYW1lGAEgASgJEhMKC2NvbnRhaW5lcklEGAIgASgJEhEKCWNyZWF0ZWRBdBgDIAEoCRISCgptb3VudFBvaW50GAQgASgJEgwKBHNpemUYBSABKAMSDgoGbGFiZWxzGAYgASgJEhMKC2NvbXBvc2VQYXRoGAcgASgJEhoKEmNvbXBvc2VQcm9qZWN0TmFtZRgIIAEoCSIUChJMaXN0Vm9sdW1lc1JlcXVlc3QiOQoTTGlzdFZvbHVtZXNSZXNwb25zZRIiCgd2b2x1bWVzGAEgAygLMhEuZG9ja2VyLnYxLlZvbHVtZSIVChNDcmVhdGVWb2x1bWVSZXF1ZXN0IhYKFENyZWF0ZVZvbHVtZVJlc3BvbnNlIkYKE0RlbGV0ZVZvbHVtZVJlcXVlc3QSEQoJdm9sdW1lSWRzGAEgAygJEgwKBGFub24YAiABKAgSDgoGdW51c2VkGAMgASgIIhYKFERlbGV0ZVZvbHVtZVJlc3BvbnNlIuMBCgdOZXR3b3JrEgwKBG5hbWUYASABKAkSCgoCaWQYAiABKAkSDgoGc3VibmV0GAMgASgJEg0KBXNjb3BlGAQgASgJEg4KBmRyaXZlchgFIAEoCRITCgtlbmFibGVfaXB2NBgGIAEoCBITCgtlbmFibGVfaXB2NhgHIAEoCBIQCghpbnRlcm5hbBgJIAEoCBISCgphdHRhY2hhYmxlGAogASgIEhEKCWNyZWF0ZWRBdBgLIAEoCRIWCg5jb21wb3NlUHJvamVjdBgMIAEoCRIUCgxjb250YWluZXJJZHMYDSADKAkiFQoTTGlzdE5ldHdvcmtzUmVxdWVzdCI8ChRMaXN0TmV0d29ya3NSZXNwb25zZRIkCghuZXR3b3JrcxgBIAMoCzISLmRvY2tlci52MS5OZXR3b3JrIhYKFENyZWF0ZU5ldHdvcmtSZXF1ZXN0IhcKFUNyZWF0ZU5ldHdvcmtSZXNwb25zZSI5ChREZWxldGVOZXR3b3JrUmVxdWVzdBISCgpuZXR3b3JrSWRzGAEgAygJEg0KBXBydW5lGAIgASgIIhcKFURlbGV0ZU5ldHdvcmtSZXNwb25zZSIrChRDb250YWluZXJMb2dzUmVxdWVzdBITCgtjb250YWluZXJJRBgBIAEoCSIeCgtMb2dzTWVzc2FnZRIPCgdtZXNzYWdlGAEgASgJImUKDVN0YXRzUmVzcG9uc2USJQoGc3lzdGVtGAEgASgLMhUuZG9ja2VyLnYxLlN5c3RlbUluZm8SLQoKY29udGFpbmVycxgCIAMoCzIZLmRvY2tlci52MS5Db250YWluZXJTdGF0cyJ8CgxTdGF0c1JlcXVlc3QSJAoEZmlsZRgBIAEoCzIWLmRvY2tlci52MS5Db21wb3NlRmlsZRIlCgZzb3J0QnkYAiABKA4yFS5kb2NrZXIudjEuU09SVF9GSUVMRBIfCgVvcmRlchgDIAEoDjIQLmRvY2tlci52MS5PUkRFUiItCgpTeXN0ZW1JbmZvEgsKA0NQVRgBIAEoARISCgptZW1JbkJ5dGVzGAIgASgEIjYKDExpc3RSZXNwb25zZRImCgRsaXN0GAEgAygLMhguZG9ja2VyLnYxLkNvbnRhaW5lckxpc3Qi5AEKDUNvbnRhaW5lckxpc3QSCgoCaWQYASABKAkSDwoHaW1hZ2VJRBgCIAEoCRIRCglpbWFnZU5hbWUYAyABKAkSDgoGc3RhdHVzGAQgASgJEgwKBG5hbWUYBSABKAkSDwoHY3JlYXRlZBgGIAEoCRIeCgVwb3J0cxgHIAMoCzIPLmRvY2tlci52MS5Qb3J0EhMKC3NlcnZpY2VOYW1lGAggASgJEhMKC3NlcnZpY2VQYXRoGAkgASgJEhEKCXN0YWNrTmFtZRgKIAEoCRIXCg91cGRhdGVBdmFpbGFibGUYCyABKAkiugEKDkNvbnRhaW5lclN0YXRzEgoKAmlkGAEgASgJEgwKBG5hbWUYAiABKAkSEQoJY3B1X3VzYWdlGAMgASgBEhQKDG1lbW9yeV91c2FnZRgEIAEoBBIUCgxtZW1vcnlfbGltaXQYBSABKAQSEgoKbmV0d29ya19yeBgGIAEoBBISCgpuZXR3b3JrX3R4GAcgASgEEhIKCmJsb2NrX3JlYWQYCCABKAQSEwoLYmxvY2tfd3JpdGUYCSABKAQiQwoEUG9ydBIOCgZwdWJsaWMYASABKAUSDwoHcHJpdmF0ZRgCIAEoBRIMCgRob3N0GAMgASgJEgwKBHR5cGUYBCABKAkiBwoFRW1wdHkiKAoQQ29udGFpbmVyUmVxdWVzdBIUCgxjb250YWluZXJJZHMYASADKAkiOQoLQ29tcG9zZUZpbGUSEAoIZmlsZW5hbWUYASABKAkSGAoQc2VsZWN0ZWRTZXJ2aWNlcxgCIAMoCSpgCgpTT1JUX0ZJRUxEEggKBE5BTUUQABIHCgNDUFUQARIHCgNNRU0QAhIOCgpORVRXT1JLX1JYEAMSDgoKTkVUV09SS19UWBAEEgoKBkRJU0tfUhAFEgoKBkRJU0tfVxAGKhkKBU9SREVSEgcKA0RTQxAAEgcKA0FTQxABMucOCg1Eb2NrZXJTZXJ2aWNlEkcKDkNvbnRhaW5lclN0YXJ0EhsuZG9ja2VyLnYxLkNvbnRhaW5lclJlcXVlc3QaFi5kb2NrZXIudjEuTG9nc01lc3NhZ2UiABJGCg1Db250YWluZXJTdG9wEhsuZG9ja2VyLnYxLkNvbnRhaW5lclJlcXVlc3QaFi5kb2NrZXIudjEuTG9nc01lc3NhZ2UiABJICg9Db250YWluZXJSZW1vdmUSGy5kb2NrZXIudjEuQ29udGFpbmVyUmVxdWVzdBoWLmRvY2tlci52MS5Mb2dzTWVzc2FnZSIAEkkKEENvbnRhaW5lclJlc3RhcnQSGy5kb2NrZXIudjEuQ29udGFpbmVyUmVxdWVzdBoWLmRvY2tlci52MS5Mb2dzTWVzc2FnZSIAEkIKD0NvbnRhaW5lclVwZGF0ZRIbLmRvY2tlci52MS5Db250YWluZXJSZXF1ZXN0GhAuZG9ja2VyLnYxLkVtcHR5IgASPAoNQ29udGFpbmVyTGlzdBIQLmRvY2tlci52MS5FbXB0eRoXLmRvY2tlci52MS5MaXN0UmVzcG9uc2UiABJFCg5Db250YWluZXJTdGF0cxIXLmRvY2tlci52MS5TdGF0c1JlcXVlc3QaGC5kb2NrZXIudjEuU3RhdHNSZXNwb25zZSIAEkwKDUNvbnRhaW5lckxvZ3MSHy5kb2NrZXIudjEuQ29udGFpbmVyTG9nc1JlcXVlc3QaFi5kb2NrZXIudjEuTG9nc01lc3NhZ2UiADABElIKE0NvbnRhaW5lckV4ZWNPdXRwdXQSHy5kb2NrZXIudjEuQ29udGFpbmVyRXhlY1JlcXVlc3QaFi5kb2NrZXIudjEuTG9nc01lc3NhZ2UiADABEkoKEkNvbnRhaW5lckV4ZWNJbnB1dBIgLmRvY2tlci52MS5Db250YWluZXJFeGVjQ21kSW5wdXQaEC5kb2NrZXIudjEuRW1wdHkiABJCCgxDb21wb3NlU3RhcnQSFi5kb2NrZXIudjEuQ29tcG9zZUZpbGUaFi5kb2NrZXIudjEuTG9nc01lc3NhZ2UiADABEkEKC0NvbXBvc2VTdG9wEhYuZG9ja2VyLnYxLkNvbXBvc2VGaWxlGhYuZG9ja2VyLnYxLkxvZ3NNZXNzYWdlIgAwARJDCg1Db21wb3NlUmVtb3ZlEhYuZG9ja2VyLnYxLkNvbXBvc2VGaWxlGhYuZG9ja2VyLnYxLkxvZ3NNZXNzYWdlIgAwARJECg5Db21wb3NlUmVzdGFydBIWLmRvY2tlci52MS5Db21wb3NlRmlsZRoWLmRvY2tlci52MS5Mb2dzTWVzc2FnZSIAMAESQwoNQ29tcG9zZVVwZGF0ZRIWLmRvY2tlci52MS5Db21wb3NlRmlsZRoWLmRvY2tlci52MS5Mb2dzTWVzc2FnZSIAMAESQAoLQ29tcG9zZUxpc3QSFi5kb2NrZXIudjEuQ29tcG9zZUZpbGUaFy5kb2NrZXIudjEuTGlzdFJlc3BvbnNlIgASSgoJSW1hZ2VMaXN0EhwuZG9ja2VyLnYxLkxpc3RJbWFnZXNSZXF1ZXN0Gh0uZG9ja2VyLnYxLkxpc3RJbWFnZXNSZXNwb25zZSIAEk4KC0ltYWdlUmVtb3ZlEh0uZG9ja2VyLnYxLlJlbW92ZUltYWdlUmVxdWVzdBoeLmRvY2tlci52MS5SZW1vdmVJbWFnZVJlc3BvbnNlIgASUQoQSW1hZ2VQcnVuZVVudXNlZBIcLmRvY2tlci52MS5JbWFnZVBydW5lUmVxdWVzdBodLmRvY2tlci52MS5JbWFnZVBydW5lUmVzcG9uc2UiABJNCgpWb2x1bWVMaXN0Eh0uZG9ja2VyLnYxLkxpc3RWb2x1bWVzUmVxdWVzdBoeLmRvY2tlci52MS5MaXN0Vm9sdW1lc1Jlc3BvbnNlIgASUQoMVm9sdW1lQ3JlYXRlEh4uZG9ja2VyLnYxLkNyZWF0ZVZvbHVtZVJlcXVlc3QaHy5kb2NrZXIudjEuQ3JlYXRlVm9sdW1lUmVzcG9uc2UiABJRCgxWb2x1bWVEZWxldGUSHi5kb2NrZXIudjEuRGVsZXRlVm9sdW1lUmVxdWVzdBofLmRvY2tlci52MS5EZWxldGVWb2x1bWVSZXNwb25zZSIAElAKC05ldHdvcmtMaXN0Eh4uZG9ja2VyLnYxLkxpc3ROZXR3b3Jrc1JlcXVlc3QaHy5kb2NrZXIudjEuTGlzdE5ldHdvcmtzUmVzcG9uc2UiABJUCg1OZXR3b3JrQ3JlYXRlEh8uZG9ja2VyLnYxLkNyZWF0ZU5ldHdvcmtSZXF1ZXN0GiAuZG9ja2VyLnYxLkNyZWF0ZU5ldHdvcmtSZXNwb25zZSIAElQKDU5ldHdvcmtEZWxldGUSHy5kb2NrZXIudjEuRGVsZXRlTmV0d29ya1JlcXVlc3QaIC5kb2NrZXIudjEuRGVsZXRlTmV0d29ya1Jlc3BvbnNlIgBCjwEKDWNvbS5kb2NrZXIudjFCC0RvY2tlclByb3RvUAFaLGdpdGh1Yi5jb20vUkEzNDEvZG9ja21hbi9nZW5lcmF0ZWQvZG9ja2VyL3YxogIDRFhYqgIJRG9ja2VyLlYxygIJRG9ja2VyXFYx4gIVRG9ja2VyXFYxXEdQQk1ldGFkYXRh6gIKRG9ja2VyOjpWMWIGcHJvdG8z");

/**
 * forwards commands from user to a running session
 *
 * @generated from message docker.v1.ContainerExecCmdInput
 */
export type ContainerExecCmdInput = Message<"docker.v1.ContainerExecCmdInput"> & {
  /**
   * @generated from field: string userCmd = 1;
   */
  userCmd: string;

  /**
   * @generated from field: string containerID = 2;
   */
  containerID: string;
};

/**
 * Describes the message docker.v1.ContainerExecCmdInput.
 * Use `create(ContainerExecCmdInputSchema)` to create a new message.
 */
export const ContainerExecCmdInputSchema: GenMessage<ContainerExecCmdInput> = /*@__PURE__*/
  messageDesc(file_docker_v1_docker, 0);

/**
 * @generated from message docker.v1.ContainerExecRequest
 */
export type ContainerExecRequest = Message<"docker.v1.ContainerExecRequest"> & {
  /**
   * @generated from field: string containerID = 1;
   */
  containerID: string;

  /**
   * if not provided uses '/bin/sh' as default
   *
   * @generated from field: repeated string execCmd = 2;
   */
  execCmd: string[];
};

/**
 * Describes the message docker.v1.ContainerExecRequest.
 * Use `create(ContainerExecRequestSchema)` to create a new message.
 */
export const ContainerExecRequestSchema: GenMessage<ContainerExecRequest> = /*@__PURE__*/
  messageDesc(file_docker_v1_docker, 1);

/**
 * Image-related messages
 *
 * @generated from message docker.v1.Image
 */
export type Image = Message<"docker.v1.Image"> & {
  /**
   * @generated from field: int64 containers = 1;
   */
  containers: bigint;

  /**
   * @generated from field: int64 created = 2;
   */
  created: bigint;

  /**
   * @generated from field: string id = 3;
   */
  id: string;

  /**
   * @generated from field: map<string, string> labels = 4;
   */
  labels: { [key: string]: string };

  /**
   * @generated from field: string parent_id = 5;
   */
  parentId: string;

  /**
   * @generated from field: repeated docker.v1.ManifestSummary manifests = 7;
   */
  manifests: ManifestSummary[];

  /**
   * @generated from field: repeated string repo_digests = 8;
   */
  repoDigests: string[];

  /**
   * @generated from field: repeated string repo_tags = 9;
   */
  repoTags: string[];

  /**
   * @generated from field: int64 shared_size = 10;
   */
  sharedSize: bigint;

  /**
   * @generated from field: int64 size = 11;
   */
  size: bigint;

  /**
   * @generated from field: string updateRef = 12;
   */
  updateRef: string;
};

/**
 * Describes the message docker.v1.Image.
 * Use `create(ImageSchema)` to create a new message.
 */
export const ImageSchema: GenMessage<Image> = /*@__PURE__*/
  messageDesc(file_docker_v1_docker, 2);

/**
 * @generated from message docker.v1.ManifestSummary
 */
export type ManifestSummary = Message<"docker.v1.ManifestSummary"> & {
  /**
   * @generated from field: string digest = 1;
   */
  digest: string;

  /**
   * @generated from field: string media_type = 2;
   */
  mediaType: string;

  /**
   * @generated from field: int64 size = 3;
   */
  size: bigint;
};

/**
 * Describes the message docker.v1.ManifestSummary.
 * Use `create(ManifestSummarySchema)` to create a new message.
 */
export const ManifestSummarySchema: GenMessage<ManifestSummary> = /*@__PURE__*/
  messageDesc(file_docker_v1_docker, 3);

/**
 * @generated from message docker.v1.ListImagesRequest
 */
export type ListImagesRequest = Message<"docker.v1.ListImagesRequest"> & {
};

/**
 * Describes the message docker.v1.ListImagesRequest.
 * Use `create(ListImagesRequestSchema)` to create a new message.
 */
export const ListImagesRequestSchema: GenMessage<ListImagesRequest> = /*@__PURE__*/
  messageDesc(file_docker_v1_docker, 4);

/**
 * @generated from message docker.v1.ListImagesResponse
 */
export type ListImagesResponse = Message<"docker.v1.ListImagesResponse"> & {
  /**
   * @generated from field: int64 totalDiskUsage = 1;
   */
  totalDiskUsage: bigint;

  /**
   * @generated from field: int64 unusedImageCount = 2;
   */
  unusedImageCount: bigint;

  /**
   * @generated from field: int64 untaggedImageCount = 3;
   */
  untaggedImageCount: bigint;

  /**
   * @generated from field: repeated docker.v1.Image images = 4;
   */
  images: Image[];
};

/**
 * Describes the message docker.v1.ListImagesResponse.
 * Use `create(ListImagesResponseSchema)` to create a new message.
 */
export const ListImagesResponseSchema: GenMessage<ListImagesResponse> = /*@__PURE__*/
  messageDesc(file_docker_v1_docker, 5);

/**
 * @generated from message docker.v1.RemoveImageRequest
 */
export type RemoveImageRequest = Message<"docker.v1.RemoveImageRequest"> & {
  /**
   * @generated from field: repeated string imageIds = 1;
   */
  imageIds: string[];
};

/**
 * Describes the message docker.v1.RemoveImageRequest.
 * Use `create(RemoveImageRequestSchema)` to create a new message.
 */
export const RemoveImageRequestSchema: GenMessage<RemoveImageRequest> = /*@__PURE__*/
  messageDesc(file_docker_v1_docker, 6);

/**
 * @generated from message docker.v1.RemoveImageResponse
 */
export type RemoveImageResponse = Message<"docker.v1.RemoveImageResponse"> & {
};

/**
 * Describes the message docker.v1.RemoveImageResponse.
 * Use `create(RemoveImageResponseSchema)` to create a new message.
 */
export const RemoveImageResponseSchema: GenMessage<RemoveImageResponse> = /*@__PURE__*/
  messageDesc(file_docker_v1_docker, 7);

/**
 * @generated from message docker.v1.ImagePruneResponse
 */
export type ImagePruneResponse = Message<"docker.v1.ImagePruneResponse"> & {
  /**
   * @generated from field: uint64 SpaceReclaimed = 1;
   */
  SpaceReclaimed: bigint;

  /**
   * @generated from field: repeated docker.v1.ImagesDeleted deleted = 2;
   */
  deleted: ImagesDeleted[];
};

/**
 * Describes the message docker.v1.ImagePruneResponse.
 * Use `create(ImagePruneResponseSchema)` to create a new message.
 */
export const ImagePruneResponseSchema: GenMessage<ImagePruneResponse> = /*@__PURE__*/
  messageDesc(file_docker_v1_docker, 8);

/**
 * @generated from message docker.v1.ImagePruneRequest
 */
export type ImagePruneRequest = Message<"docker.v1.ImagePruneRequest"> & {
  /**
   * @generated from field: bool pruneAll = 1;
   */
  pruneAll: boolean;
};

/**
 * Describes the message docker.v1.ImagePruneRequest.
 * Use `create(ImagePruneRequestSchema)` to create a new message.
 */
export const ImagePruneRequestSchema: GenMessage<ImagePruneRequest> = /*@__PURE__*/
  messageDesc(file_docker_v1_docker, 9);

/**
 * @generated from message docker.v1.ImagesDeleted
 */
export type ImagesDeleted = Message<"docker.v1.ImagesDeleted"> & {
  /**
   * @generated from field: string Deleted = 1;
   */
  Deleted: string;

  /**
   * @generated from field: string Untagged = 2;
   */
  Untagged: string;
};

/**
 * Describes the message docker.v1.ImagesDeleted.
 * Use `create(ImagesDeletedSchema)` to create a new message.
 */
export const ImagesDeletedSchema: GenMessage<ImagesDeleted> = /*@__PURE__*/
  messageDesc(file_docker_v1_docker, 10);

/**
 * Volume-related messages
 *
 * @generated from message docker.v1.Volume
 */
export type Volume = Message<"docker.v1.Volume"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string containerID = 2;
   */
  containerID: string;

  /**
   * @generated from field: string createdAt = 3;
   */
  createdAt: string;

  /**
   * @generated from field: string mountPoint = 4;
   */
  mountPoint: string;

  /**
   * @generated from field: int64 size = 5;
   */
  size: bigint;

  /**
   * @generated from field: string labels = 6;
   */
  labels: string;

  /**
   * @generated from field: string composePath = 7;
   */
  composePath: string;

  /**
   * @generated from field: string composeProjectName = 8;
   */
  composeProjectName: string;
};

/**
 * Describes the message docker.v1.Volume.
 * Use `create(VolumeSchema)` to create a new message.
 */
export const VolumeSchema: GenMessage<Volume> = /*@__PURE__*/
  messageDesc(file_docker_v1_docker, 11);

/**
 * @generated from message docker.v1.ListVolumesRequest
 */
export type ListVolumesRequest = Message<"docker.v1.ListVolumesRequest"> & {
};

/**
 * Describes the message docker.v1.ListVolumesRequest.
 * Use `create(ListVolumesRequestSchema)` to create a new message.
 */
export const ListVolumesRequestSchema: GenMessage<ListVolumesRequest> = /*@__PURE__*/
  messageDesc(file_docker_v1_docker, 12);

/**
 * @generated from message docker.v1.ListVolumesResponse
 */
export type ListVolumesResponse = Message<"docker.v1.ListVolumesResponse"> & {
  /**
   * @generated from field: repeated docker.v1.Volume volumes = 1;
   */
  volumes: Volume[];
};

/**
 * Describes the message docker.v1.ListVolumesResponse.
 * Use `create(ListVolumesResponseSchema)` to create a new message.
 */
export const ListVolumesResponseSchema: GenMessage<ListVolumesResponse> = /*@__PURE__*/
  messageDesc(file_docker_v1_docker, 13);

/**
 * @generated from message docker.v1.CreateVolumeRequest
 */
export type CreateVolumeRequest = Message<"docker.v1.CreateVolumeRequest"> & {
};

/**
 * Describes the message docker.v1.CreateVolumeRequest.
 * Use `create(CreateVolumeRequestSchema)` to create a new message.
 */
export const CreateVolumeRequestSchema: GenMessage<CreateVolumeRequest> = /*@__PURE__*/
  messageDesc(file_docker_v1_docker, 14);

/**
 * @generated from message docker.v1.CreateVolumeResponse
 */
export type CreateVolumeResponse = Message<"docker.v1.CreateVolumeResponse"> & {
};

/**
 * Describes the message docker.v1.CreateVolumeResponse.
 * Use `create(CreateVolumeResponseSchema)` to create a new message.
 */
export const CreateVolumeResponseSchema: GenMessage<CreateVolumeResponse> = /*@__PURE__*/
  messageDesc(file_docker_v1_docker, 15);

/**
 * @generated from message docker.v1.DeleteVolumeRequest
 */
export type DeleteVolumeRequest = Message<"docker.v1.DeleteVolumeRequest"> & {
  /**
   * @generated from field: repeated string volumeIds = 1;
   */
  volumeIds: string[];

  /**
   * @generated from field: bool anon = 2;
   */
  anon: boolean;

  /**
   * @generated from field: bool unused = 3;
   */
  unused: boolean;
};

/**
 * Describes the message docker.v1.DeleteVolumeRequest.
 * Use `create(DeleteVolumeRequestSchema)` to create a new message.
 */
export const DeleteVolumeRequestSchema: GenMessage<DeleteVolumeRequest> = /*@__PURE__*/
  messageDesc(file_docker_v1_docker, 16);

/**
 * @generated from message docker.v1.DeleteVolumeResponse
 */
export type DeleteVolumeResponse = Message<"docker.v1.DeleteVolumeResponse"> & {
};

/**
 * Describes the message docker.v1.DeleteVolumeResponse.
 * Use `create(DeleteVolumeResponseSchema)` to create a new message.
 */
export const DeleteVolumeResponseSchema: GenMessage<DeleteVolumeResponse> = /*@__PURE__*/
  messageDesc(file_docker_v1_docker, 17);

/**
 * Network-related messages
 *
 * @generated from message docker.v1.Network
 */
export type Network = Message<"docker.v1.Network"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string id = 2;
   */
  id: string;

  /**
   * @generated from field: string subnet = 3;
   */
  subnet: string;

  /**
   * @generated from field: string scope = 4;
   */
  scope: string;

  /**
   * @generated from field: string driver = 5;
   */
  driver: string;

  /**
   * @generated from field: bool enable_ipv4 = 6;
   */
  enableIpv4: boolean;

  /**
   * @generated from field: bool enable_ipv6 = 7;
   */
  enableIpv6: boolean;

  /**
   * @generated from field: bool internal = 9;
   */
  internal: boolean;

  /**
   * @generated from field: bool attachable = 10;
   */
  attachable: boolean;

  /**
   * @generated from field: string createdAt = 11;
   */
  createdAt: string;

  /**
   * @generated from field: string composeProject = 12;
   */
  composeProject: string;

  /**
   * @generated from field: repeated string containerIds = 13;
   */
  containerIds: string[];
};

/**
 * Describes the message docker.v1.Network.
 * Use `create(NetworkSchema)` to create a new message.
 */
export const NetworkSchema: GenMessage<Network> = /*@__PURE__*/
  messageDesc(file_docker_v1_docker, 18);

/**
 * @generated from message docker.v1.ListNetworksRequest
 */
export type ListNetworksRequest = Message<"docker.v1.ListNetworksRequest"> & {
};

/**
 * Describes the message docker.v1.ListNetworksRequest.
 * Use `create(ListNetworksRequestSchema)` to create a new message.
 */
export const ListNetworksRequestSchema: GenMessage<ListNetworksRequest> = /*@__PURE__*/
  messageDesc(file_docker_v1_docker, 19);

/**
 * @generated from message docker.v1.ListNetworksResponse
 */
export type ListNetworksResponse = Message<"docker.v1.ListNetworksResponse"> & {
  /**
   * @generated from field: repeated docker.v1.Network networks = 1;
   */
  networks: Network[];
};

/**
 * Describes the message docker.v1.ListNetworksResponse.
 * Use `create(ListNetworksResponseSchema)` to create a new message.
 */
export const ListNetworksResponseSchema: GenMessage<ListNetworksResponse> = /*@__PURE__*/
  messageDesc(file_docker_v1_docker, 20);

/**
 * @generated from message docker.v1.CreateNetworkRequest
 */
export type CreateNetworkRequest = Message<"docker.v1.CreateNetworkRequest"> & {
};

/**
 * Describes the message docker.v1.CreateNetworkRequest.
 * Use `create(CreateNetworkRequestSchema)` to create a new message.
 */
export const CreateNetworkRequestSchema: GenMessage<CreateNetworkRequest> = /*@__PURE__*/
  messageDesc(file_docker_v1_docker, 21);

/**
 * @generated from message docker.v1.CreateNetworkResponse
 */
export type CreateNetworkResponse = Message<"docker.v1.CreateNetworkResponse"> & {
};

/**
 * Describes the message docker.v1.CreateNetworkResponse.
 * Use `create(CreateNetworkResponseSchema)` to create a new message.
 */
export const CreateNetworkResponseSchema: GenMessage<CreateNetworkResponse> = /*@__PURE__*/
  messageDesc(file_docker_v1_docker, 22);

/**
 * @generated from message docker.v1.DeleteNetworkRequest
 */
export type DeleteNetworkRequest = Message<"docker.v1.DeleteNetworkRequest"> & {
  /**
   * @generated from field: repeated string networkIds = 1;
   */
  networkIds: string[];

  /**
   * @generated from field: bool prune = 2;
   */
  prune: boolean;
};

/**
 * Describes the message docker.v1.DeleteNetworkRequest.
 * Use `create(DeleteNetworkRequestSchema)` to create a new message.
 */
export const DeleteNetworkRequestSchema: GenMessage<DeleteNetworkRequest> = /*@__PURE__*/
  messageDesc(file_docker_v1_docker, 23);

/**
 * @generated from message docker.v1.DeleteNetworkResponse
 */
export type DeleteNetworkResponse = Message<"docker.v1.DeleteNetworkResponse"> & {
};

/**
 * Describes the message docker.v1.DeleteNetworkResponse.
 * Use `create(DeleteNetworkResponseSchema)` to create a new message.
 */
export const DeleteNetworkResponseSchema: GenMessage<DeleteNetworkResponse> = /*@__PURE__*/
  messageDesc(file_docker_v1_docker, 24);

/**
 * @generated from message docker.v1.ContainerLogsRequest
 */
export type ContainerLogsRequest = Message<"docker.v1.ContainerLogsRequest"> & {
  /**
   * @generated from field: string containerID = 1;
   */
  containerID: string;
};

/**
 * Describes the message docker.v1.ContainerLogsRequest.
 * Use `create(ContainerLogsRequestSchema)` to create a new message.
 */
export const ContainerLogsRequestSchema: GenMessage<ContainerLogsRequest> = /*@__PURE__*/
  messageDesc(file_docker_v1_docker, 25);

/**
 * @generated from message docker.v1.LogsMessage
 */
export type LogsMessage = Message<"docker.v1.LogsMessage"> & {
  /**
   * @generated from field: string message = 1;
   */
  message: string;
};

/**
 * Describes the message docker.v1.LogsMessage.
 * Use `create(LogsMessageSchema)` to create a new message.
 */
export const LogsMessageSchema: GenMessage<LogsMessage> = /*@__PURE__*/
  messageDesc(file_docker_v1_docker, 26);

/**
 * @generated from message docker.v1.StatsResponse
 */
export type StatsResponse = Message<"docker.v1.StatsResponse"> & {
  /**
   * @generated from field: docker.v1.SystemInfo system = 1;
   */
  system?: SystemInfo;

  /**
   * @generated from field: repeated docker.v1.ContainerStats containers = 2;
   */
  containers: ContainerStats[];
};

/**
 * Describes the message docker.v1.StatsResponse.
 * Use `create(StatsResponseSchema)` to create a new message.
 */
export const StatsResponseSchema: GenMessage<StatsResponse> = /*@__PURE__*/
  messageDesc(file_docker_v1_docker, 27);

/**
 * @generated from message docker.v1.StatsRequest
 */
export type StatsRequest = Message<"docker.v1.StatsRequest"> & {
  /**
   * @generated from field: docker.v1.ComposeFile file = 1;
   */
  file?: ComposeFile;

  /**
   * @generated from field: docker.v1.SORT_FIELD sortBy = 2;
   */
  sortBy: SORT_FIELD;

  /**
   * @generated from field: docker.v1.ORDER order = 3;
   */
  order: ORDER;
};

/**
 * Describes the message docker.v1.StatsRequest.
 * Use `create(StatsRequestSchema)` to create a new message.
 */
export const StatsRequestSchema: GenMessage<StatsRequest> = /*@__PURE__*/
  messageDesc(file_docker_v1_docker, 28);

/**
 * @generated from message docker.v1.SystemInfo
 */
export type SystemInfo = Message<"docker.v1.SystemInfo"> & {
  /**
   * represents float64
   *
   * @generated from field: double CPU = 1;
   */
  CPU: number;

  /**
   * @generated from field: uint64 memInBytes = 2;
   */
  memInBytes: bigint;
};

/**
 * Describes the message docker.v1.SystemInfo.
 * Use `create(SystemInfoSchema)` to create a new message.
 */
export const SystemInfoSchema: GenMessage<SystemInfo> = /*@__PURE__*/
  messageDesc(file_docker_v1_docker, 29);

/**
 * @generated from message docker.v1.ListResponse
 */
export type ListResponse = Message<"docker.v1.ListResponse"> & {
  /**
   * @generated from field: repeated docker.v1.ContainerList list = 1;
   */
  list: ContainerList[];
};

/**
 * Describes the message docker.v1.ListResponse.
 * Use `create(ListResponseSchema)` to create a new message.
 */
export const ListResponseSchema: GenMessage<ListResponse> = /*@__PURE__*/
  messageDesc(file_docker_v1_docker, 30);

/**
 * @generated from message docker.v1.ContainerList
 */
export type ContainerList = Message<"docker.v1.ContainerList"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string imageID = 2;
   */
  imageID: string;

  /**
   * @generated from field: string imageName = 3;
   */
  imageName: string;

  /**
   * @generated from field: string status = 4;
   */
  status: string;

  /**
   * @generated from field: string name = 5;
   */
  name: string;

  /**
   * @generated from field: string created = 6;
   */
  created: string;

  /**
   * @generated from field: repeated docker.v1.Port ports = 7;
   */
  ports: Port[];

  /**
   * name to use in selecting service in docker compose
   *
   * @generated from field: string serviceName = 8;
   */
  serviceName: string;

  /**
   * @generated from field: string servicePath = 9;
   */
  servicePath: string;

  /**
   * @generated from field: string stackName = 10;
   */
  stackName: string;

  /**
   * @generated from field: string updateAvailable = 11;
   */
  updateAvailable: string;
};

/**
 * Describes the message docker.v1.ContainerList.
 * Use `create(ContainerListSchema)` to create a new message.
 */
export const ContainerListSchema: GenMessage<ContainerList> = /*@__PURE__*/
  messageDesc(file_docker_v1_docker, 31);

/**
 * ContainerInfo holds metrics for a single Docker container.
 *
 * @generated from message docker.v1.ContainerStats
 */
export type ContainerStats = Message<"docker.v1.ContainerStats"> & {
  /**
   * Unique identifier of the container.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Name of the container.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * CPU usage as a percentage.
   *
   * @generated from field: double cpu_usage = 3;
   */
  cpuUsage: number;

  /**
   * Current memory usage in bytes.
   *
   * @generated from field: uint64 memory_usage = 4;
   */
  memoryUsage: bigint;

  /**
   * Maximum memory limit in bytes.
   *
   * @generated from field: uint64 memory_limit = 5;
   */
  memoryLimit: bigint;

  /**
   * Total bytes received over the network.
   *
   * @generated from field: uint64 network_rx = 6;
   */
  networkRx: bigint;

  /**
   * Total bytes sent over the network.
   *
   * @generated from field: uint64 network_tx = 7;
   */
  networkTx: bigint;

  /**
   * Total bytes read from block devices.
   *
   * @generated from field: uint64 block_read = 8;
   */
  blockRead: bigint;

  /**
   * Total bytes written to block devices.
   *
   * @generated from field: uint64 block_write = 9;
   */
  blockWrite: bigint;
};

/**
 * Describes the message docker.v1.ContainerStats.
 * Use `create(ContainerStatsSchema)` to create a new message.
 */
export const ContainerStatsSchema: GenMessage<ContainerStats> = /*@__PURE__*/
  messageDesc(file_docker_v1_docker, 32);

/**
 * @generated from message docker.v1.Port
 */
export type Port = Message<"docker.v1.Port"> & {
  /**
   * @generated from field: int32 public = 1;
   */
  public: number;

  /**
   * @generated from field: int32 private = 2;
   */
  private: number;

  /**
   * @generated from field: string host = 3;
   */
  host: string;

  /**
   * @generated from field: string type = 4;
   */
  type: string;
};

/**
 * Describes the message docker.v1.Port.
 * Use `create(PortSchema)` to create a new message.
 */
export const PortSchema: GenMessage<Port> = /*@__PURE__*/
  messageDesc(file_docker_v1_docker, 33);

/**
 * @generated from message docker.v1.Empty
 */
export type Empty = Message<"docker.v1.Empty"> & {
};

/**
 * Describes the message docker.v1.Empty.
 * Use `create(EmptySchema)` to create a new message.
 */
export const EmptySchema: GenMessage<Empty> = /*@__PURE__*/
  messageDesc(file_docker_v1_docker, 34);

/**
 * @generated from message docker.v1.ContainerRequest
 */
export type ContainerRequest = Message<"docker.v1.ContainerRequest"> & {
  /**
   * @generated from field: repeated string containerIds = 1;
   */
  containerIds: string[];
};

/**
 * Describes the message docker.v1.ContainerRequest.
 * Use `create(ContainerRequestSchema)` to create a new message.
 */
export const ContainerRequestSchema: GenMessage<ContainerRequest> = /*@__PURE__*/
  messageDesc(file_docker_v1_docker, 35);

/**
 * @generated from message docker.v1.ComposeFile
 */
export type ComposeFile = Message<"docker.v1.ComposeFile"> & {
  /**
   * @generated from field: string filename = 1;
   */
  filename: string;

  /**
   * @generated from field: repeated string selectedServices = 2;
   */
  selectedServices: string[];
};

/**
 * Describes the message docker.v1.ComposeFile.
 * Use `create(ComposeFileSchema)` to create a new message.
 */
export const ComposeFileSchema: GenMessage<ComposeFile> = /*@__PURE__*/
  messageDesc(file_docker_v1_docker, 36);

/**
 * @generated from enum docker.v1.SORT_FIELD
 */
export enum SORT_FIELD {
  /**
   * @generated from enum value: NAME = 0;
   */
  NAME = 0,

  /**
   * @generated from enum value: CPU = 1;
   */
  CPU = 1,

  /**
   * @generated from enum value: MEM = 2;
   */
  MEM = 2,

  /**
   * @generated from enum value: NETWORK_RX = 3;
   */
  NETWORK_RX = 3,

  /**
   * @generated from enum value: NETWORK_TX = 4;
   */
  NETWORK_TX = 4,

  /**
   * @generated from enum value: DISK_R = 5;
   */
  DISK_R = 5,

  /**
   * @generated from enum value: DISK_W = 6;
   */
  DISK_W = 6,
}

/**
 * Describes the enum docker.v1.SORT_FIELD.
 */
export const SORT_FIELDSchema: GenEnum<SORT_FIELD> = /*@__PURE__*/
  enumDesc(file_docker_v1_docker, 0);

/**
 * @generated from enum docker.v1.ORDER
 */
export enum ORDER {
  /**
   * default val
   *
   * @generated from enum value: DSC = 0;
   */
  DSC = 0,

  /**
   * @generated from enum value: ASC = 1;
   */
  ASC = 1,
}

/**
 * Describes the enum docker.v1.ORDER.
 */
export const ORDERSchema: GenEnum<ORDER> = /*@__PURE__*/
  enumDesc(file_docker_v1_docker, 1);

/**
 * @generated from service docker.v1.DockerService
 */
export const DockerService: GenService<{
  /**
   * container
   *
   * @generated from rpc docker.v1.DockerService.ContainerStart
   */
  containerStart: {
    methodKind: "unary";
    input: typeof ContainerRequestSchema;
    output: typeof LogsMessageSchema;
  },
  /**
   * @generated from rpc docker.v1.DockerService.ContainerStop
   */
  containerStop: {
    methodKind: "unary";
    input: typeof ContainerRequestSchema;
    output: typeof LogsMessageSchema;
  },
  /**
   * @generated from rpc docker.v1.DockerService.ContainerRemove
   */
  containerRemove: {
    methodKind: "unary";
    input: typeof ContainerRequestSchema;
    output: typeof LogsMessageSchema;
  },
  /**
   * @generated from rpc docker.v1.DockerService.ContainerRestart
   */
  containerRestart: {
    methodKind: "unary";
    input: typeof ContainerRequestSchema;
    output: typeof LogsMessageSchema;
  },
  /**
   * @generated from rpc docker.v1.DockerService.ContainerUpdate
   */
  containerUpdate: {
    methodKind: "unary";
    input: typeof ContainerRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * @generated from rpc docker.v1.DockerService.ContainerList
   */
  containerList: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof ListResponseSchema;
  },
  /**
   * @generated from rpc docker.v1.DockerService.ContainerStats
   */
  containerStats: {
    methodKind: "unary";
    input: typeof StatsRequestSchema;
    output: typeof StatsResponseSchema;
  },
  /**
   * @generated from rpc docker.v1.DockerService.ContainerLogs
   */
  containerLogs: {
    methodKind: "server_streaming";
    input: typeof ContainerLogsRequestSchema;
    output: typeof LogsMessageSchema;
  },
  /**
   * start a stream that will show container execs
   *
   * @generated from rpc docker.v1.DockerService.ContainerExecOutput
   */
  containerExecOutput: {
    methodKind: "server_streaming";
    input: typeof ContainerExecRequestSchema;
    output: typeof LogsMessageSchema;
  },
  /**
   * pass in the commands with the container ID
   *
   * @generated from rpc docker.v1.DockerService.ContainerExecInput
   */
  containerExecInput: {
    methodKind: "unary";
    input: typeof ContainerExecCmdInputSchema;
    output: typeof EmptySchema;
  },
  /**
   * compose
   *
   * @generated from rpc docker.v1.DockerService.ComposeStart
   */
  composeStart: {
    methodKind: "server_streaming";
    input: typeof ComposeFileSchema;
    output: typeof LogsMessageSchema;
  },
  /**
   * @generated from rpc docker.v1.DockerService.ComposeStop
   */
  composeStop: {
    methodKind: "server_streaming";
    input: typeof ComposeFileSchema;
    output: typeof LogsMessageSchema;
  },
  /**
   * @generated from rpc docker.v1.DockerService.ComposeRemove
   */
  composeRemove: {
    methodKind: "server_streaming";
    input: typeof ComposeFileSchema;
    output: typeof LogsMessageSchema;
  },
  /**
   * @generated from rpc docker.v1.DockerService.ComposeRestart
   */
  composeRestart: {
    methodKind: "server_streaming";
    input: typeof ComposeFileSchema;
    output: typeof LogsMessageSchema;
  },
  /**
   * @generated from rpc docker.v1.DockerService.ComposeUpdate
   */
  composeUpdate: {
    methodKind: "server_streaming";
    input: typeof ComposeFileSchema;
    output: typeof LogsMessageSchema;
  },
  /**
   * @generated from rpc docker.v1.DockerService.ComposeList
   */
  composeList: {
    methodKind: "unary";
    input: typeof ComposeFileSchema;
    output: typeof ListResponseSchema;
  },
  /**
   * images
   *
   * @generated from rpc docker.v1.DockerService.ImageList
   */
  imageList: {
    methodKind: "unary";
    input: typeof ListImagesRequestSchema;
    output: typeof ListImagesResponseSchema;
  },
  /**
   * @generated from rpc docker.v1.DockerService.ImageRemove
   */
  imageRemove: {
    methodKind: "unary";
    input: typeof RemoveImageRequestSchema;
    output: typeof RemoveImageResponseSchema;
  },
  /**
   * @generated from rpc docker.v1.DockerService.ImagePruneUnused
   */
  imagePruneUnused: {
    methodKind: "unary";
    input: typeof ImagePruneRequestSchema;
    output: typeof ImagePruneResponseSchema;
  },
  /**
   * volumes
   *
   * @generated from rpc docker.v1.DockerService.VolumeList
   */
  volumeList: {
    methodKind: "unary";
    input: typeof ListVolumesRequestSchema;
    output: typeof ListVolumesResponseSchema;
  },
  /**
   * @generated from rpc docker.v1.DockerService.VolumeCreate
   */
  volumeCreate: {
    methodKind: "unary";
    input: typeof CreateVolumeRequestSchema;
    output: typeof CreateVolumeResponseSchema;
  },
  /**
   * @generated from rpc docker.v1.DockerService.VolumeDelete
   */
  volumeDelete: {
    methodKind: "unary";
    input: typeof DeleteVolumeRequestSchema;
    output: typeof DeleteVolumeResponseSchema;
  },
  /**
   * networks
   *
   * @generated from rpc docker.v1.DockerService.NetworkList
   */
  networkList: {
    methodKind: "unary";
    input: typeof ListNetworksRequestSchema;
    output: typeof ListNetworksResponseSchema;
  },
  /**
   * @generated from rpc docker.v1.DockerService.NetworkCreate
   */
  networkCreate: {
    methodKind: "unary";
    input: typeof CreateNetworkRequestSchema;
    output: typeof CreateNetworkResponseSchema;
  },
  /**
   * @generated from rpc docker.v1.DockerService.NetworkDelete
   */
  networkDelete: {
    methodKind: "unary";
    input: typeof DeleteNetworkRequestSchema;
    output: typeof DeleteNetworkResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_docker_v1_docker, 0);

