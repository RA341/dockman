syntax = "proto3";

package docker.v1;

option go_package = "github.com/RA341/dockman/generated/docker/v1";

service DockerService {
  // container
  rpc ContainerStart(ContainerRequest) returns (LogsMessage) {}
  rpc ContainerStop(ContainerRequest) returns (LogsMessage) {}
  rpc ContainerRemove(ContainerRequest) returns (LogsMessage) {}
  rpc ContainerRestart(ContainerRequest) returns (LogsMessage) {}
  rpc ContainerUpdate(ContainerRequest) returns (LogsMessage) {}
  rpc ContainerList(Empty) returns (ListResponse) {}
  rpc ContainerStats(StatsRequest) returns (StatsResponse) {}
  rpc ContainerLogs(ContainerLogsRequest) returns (stream LogsMessage) {}

  // compose
  rpc ComposeStart(ComposeFile) returns (stream LogsMessage) {}
  rpc ComposeStop(ComposeFile) returns (stream LogsMessage) {}
  rpc ComposeRemove(ComposeFile) returns (stream LogsMessage) {}
  rpc ComposeRestart(ComposeFile) returns (stream LogsMessage) {}
  rpc ComposeUpdate(ComposeFile) returns (stream LogsMessage) {}
  rpc ComposeList(ComposeFile) returns (ListResponse) {}

  // images
  rpc ImageList(ListImagesRequest) returns (ListImagesResponse) {}
  rpc ImageRemove(RemoveImageRequest) returns (RemoveImageResponse) {}
  rpc ImagePruneUnused(ImagePruneRequest) returns (ImagePruneResponse) {}

  // volumes
  rpc VolumeList(ListVolumesRequest) returns (ListVolumesResponse) {}
  rpc VolumeCreate(CreateVolumeRequest) returns (CreateVolumeResponse) {}
  rpc VolumeDelete(DeleteVolumeRequest) returns (DeleteVolumeResponse) {}

  // networks
  rpc NetworkList(ListNetworksRequest) returns (ListNetworksResponse) {}
  rpc NetworkCreate(CreateNetworkRequest) returns (CreateNetworkResponse) {}
  rpc NetworkDelete(DeleteNetworkRequest) returns (DeleteNetworkResponse) {}
}

// Image-related messages
message Image {
  int64 containers = 1;
  int64 created = 2;
  string id = 3;
  map<string, string> labels = 4;
  string parent_id = 5;
  repeated ManifestSummary manifests = 7;
  repeated string repo_digests = 8;
  repeated string repo_tags = 9;
  int64 shared_size = 10;
  int64 size = 11;
}

message ManifestSummary {
  string digest = 1;
  string media_type = 2;
  int64 size = 3;
}

message ListImagesRequest {}

message ListImagesResponse {
  int64 totalDiskUsage = 1;
  int64 unusedImageCount = 2;
  int64 untaggedImageCount = 3;
  repeated Image images = 4;
}

message RemoveImageRequest {
  repeated string imageIds = 1;
}

message RemoveImageResponse {}

message ImagePruneResponse {
  uint64 SpaceReclaimed = 1;
  repeated ImagesDeleted deleted = 2;
}

message ImagePruneRequest {
  bool pruneAll = 1;
}

message ImagesDeleted {
  string Deleted = 1;
  string Untagged = 2;
}

// Volume-related messages
message Volume {
  string CreatedAt = 1;
  string Driver = 2;
  map<string, string> Labels = 3;
  string MountPoint = 4;
  string Name = 5;
  string Scope = 6;
}

message ListVolumesRequest {}

message ListVolumesResponse {
  repeated Volume volumes = 1;
}

message CreateVolumeRequest {
}

message CreateVolumeResponse {
}

message DeleteVolumeRequest {
}

message DeleteVolumeResponse {
}

// Network-related messages
message Network {
  string name = 1;
  string id = 2;
  string scope = 4;
  string driver = 5;
  bool enable_ipv4 = 6;
  bool enable_ipv6 = 7;
  bool internal = 9;
  bool attachable = 10;
  bool ingress = 11;
  bool config_only = 13;
}

message ListNetworksRequest {}

message ListNetworksResponse {
  repeated Network networks = 1;
}

message CreateNetworkRequest {
}

message CreateNetworkResponse {
}

message DeleteNetworkRequest {
}

message DeleteNetworkResponse {
}

message ContainerLogsRequest {
  string containerID = 1;
}

message LogsMessage {
  string message = 1;
}

message StatsResponse {
  SystemInfo system = 1;
  repeated ContainerStats containers = 2;
}

enum SORT_FIELD {
  NAME = 0;
  CPU = 1;
  MEM = 2;
  NETWORK_RX = 3;
  NETWORK_TX = 4;
  DISK_R = 5;
  DISK_W = 6;
}

enum ORDER {
  DSC = 0; // default val
  ASC = 1;
}

message StatsRequest {
  ComposeFile file = 1;
  SORT_FIELD sortBy = 2;
  ORDER order = 3;
}

message SystemInfo {
  double CPU = 1; // represents float64
  uint64 memInBytes = 2;
}

message ListResponse {
  repeated ContainerList list = 1;
}

message ContainerList {
  string id = 1;
  string imageID = 2;
  string imageName = 3;
  string status = 4;
  string name = 5;
  string created = 6;
  repeated Port ports = 7;
  // name to use in selecting service in docker compose
  string serviceName = 8;
}

// ContainerInfo holds metrics for a single Docker container.
message ContainerStats {
  // Unique identifier of the container.
  string id = 1;
  // Name of the container.
  string name = 2;
  // CPU usage as a percentage.
  double cpu_usage = 3;
  // Current memory usage in bytes.
  uint64 memory_usage = 4;
  // Maximum memory limit in bytes.
  uint64 memory_limit = 5;
  // Total bytes received over the network.
  uint64 network_rx = 6;
  // Total bytes sent over the network.
  uint64 network_tx = 7;
  // Total bytes read from block devices.
  uint64 block_read = 8;
  // Total bytes written to block devices.
  uint64 block_write = 9;
}


message Port {
  int32 public = 1;
  int32 private = 2;
  string host = 3;
  string type = 4;
}

message Empty{}

message ContainerRequest {
  repeated string containerIds = 1;
}

message ComposeFile {
  string filename = 1;
  repeated string selectedServices = 2;
}
