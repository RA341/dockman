// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: config/v1/config.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/RA341/dockman/generated/config/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ConfigServiceName is the fully-qualified name of the ConfigService service.
	ConfigServiceName = "config.v1.ConfigService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ConfigServiceGetUserConfigProcedure is the fully-qualified name of the ConfigService's
	// GetUserConfig RPC.
	ConfigServiceGetUserConfigProcedure = "/config.v1.ConfigService/GetUserConfig"
	// ConfigServiceSetUserConfigProcedure is the fully-qualified name of the ConfigService's
	// SetUserConfig RPC.
	ConfigServiceSetUserConfigProcedure = "/config.v1.ConfigService/SetUserConfig"
)

// ConfigServiceClient is a client for the config.v1.ConfigService service.
type ConfigServiceClient interface {
	GetUserConfig(context.Context, *connect.Request[v1.Empty]) (*connect.Response[v1.UserConfig], error)
	SetUserConfig(context.Context, *connect.Request[v1.SetUserRequest]) (*connect.Response[v1.Empty], error)
}

// NewConfigServiceClient constructs a client for the config.v1.ConfigService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewConfigServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ConfigServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	configServiceMethods := v1.File_config_v1_config_proto.Services().ByName("ConfigService").Methods()
	return &configServiceClient{
		getUserConfig: connect.NewClient[v1.Empty, v1.UserConfig](
			httpClient,
			baseURL+ConfigServiceGetUserConfigProcedure,
			connect.WithSchema(configServiceMethods.ByName("GetUserConfig")),
			connect.WithClientOptions(opts...),
		),
		setUserConfig: connect.NewClient[v1.SetUserRequest, v1.Empty](
			httpClient,
			baseURL+ConfigServiceSetUserConfigProcedure,
			connect.WithSchema(configServiceMethods.ByName("SetUserConfig")),
			connect.WithClientOptions(opts...),
		),
	}
}

// configServiceClient implements ConfigServiceClient.
type configServiceClient struct {
	getUserConfig *connect.Client[v1.Empty, v1.UserConfig]
	setUserConfig *connect.Client[v1.SetUserRequest, v1.Empty]
}

// GetUserConfig calls config.v1.ConfigService.GetUserConfig.
func (c *configServiceClient) GetUserConfig(ctx context.Context, req *connect.Request[v1.Empty]) (*connect.Response[v1.UserConfig], error) {
	return c.getUserConfig.CallUnary(ctx, req)
}

// SetUserConfig calls config.v1.ConfigService.SetUserConfig.
func (c *configServiceClient) SetUserConfig(ctx context.Context, req *connect.Request[v1.SetUserRequest]) (*connect.Response[v1.Empty], error) {
	return c.setUserConfig.CallUnary(ctx, req)
}

// ConfigServiceHandler is an implementation of the config.v1.ConfigService service.
type ConfigServiceHandler interface {
	GetUserConfig(context.Context, *connect.Request[v1.Empty]) (*connect.Response[v1.UserConfig], error)
	SetUserConfig(context.Context, *connect.Request[v1.SetUserRequest]) (*connect.Response[v1.Empty], error)
}

// NewConfigServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewConfigServiceHandler(svc ConfigServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	configServiceMethods := v1.File_config_v1_config_proto.Services().ByName("ConfigService").Methods()
	configServiceGetUserConfigHandler := connect.NewUnaryHandler(
		ConfigServiceGetUserConfigProcedure,
		svc.GetUserConfig,
		connect.WithSchema(configServiceMethods.ByName("GetUserConfig")),
		connect.WithHandlerOptions(opts...),
	)
	configServiceSetUserConfigHandler := connect.NewUnaryHandler(
		ConfigServiceSetUserConfigProcedure,
		svc.SetUserConfig,
		connect.WithSchema(configServiceMethods.ByName("SetUserConfig")),
		connect.WithHandlerOptions(opts...),
	)
	return "/config.v1.ConfigService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ConfigServiceGetUserConfigProcedure:
			configServiceGetUserConfigHandler.ServeHTTP(w, r)
		case ConfigServiceSetUserConfigProcedure:
			configServiceSetUserConfigHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedConfigServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedConfigServiceHandler struct{}

func (UnimplementedConfigServiceHandler) GetUserConfig(context.Context, *connect.Request[v1.Empty]) (*connect.Response[v1.UserConfig], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("config.v1.ConfigService.GetUserConfig is not implemented"))
}

func (UnimplementedConfigServiceHandler) SetUserConfig(context.Context, *connect.Request[v1.SetUserRequest]) (*connect.Response[v1.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("config.v1.ConfigService.SetUserConfig is not implemented"))
}
