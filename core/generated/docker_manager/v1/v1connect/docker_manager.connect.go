// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: docker_manager/v1/docker_manager.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/RA341/dockman/generated/docker_manager/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DockerManagerServiceName is the fully-qualified name of the DockerManagerService service.
	DockerManagerServiceName = "docker_manager.v1.DockerManagerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DockerManagerServiceListProcedure is the fully-qualified name of the DockerManagerService's List
	// RPC.
	DockerManagerServiceListProcedure = "/docker_manager.v1.DockerManagerService/List"
	// DockerManagerServiceSwitchClientProcedure is the fully-qualified name of the
	// DockerManagerService's switchClient RPC.
	DockerManagerServiceSwitchClientProcedure = "/docker_manager.v1.DockerManagerService/switchClient"
)

// DockerManagerServiceClient is a client for the docker_manager.v1.DockerManagerService service.
type DockerManagerServiceClient interface {
	List(context.Context, *connect.Request[v1.Empty]) (*connect.Response[v1.ListResponse], error)
	SwitchClient(context.Context, *connect.Request[v1.SwitchRequest]) (*connect.Response[v1.Empty], error)
}

// NewDockerManagerServiceClient constructs a client for the docker_manager.v1.DockerManagerService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDockerManagerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DockerManagerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	dockerManagerServiceMethods := v1.File_docker_manager_v1_docker_manager_proto.Services().ByName("DockerManagerService").Methods()
	return &dockerManagerServiceClient{
		list: connect.NewClient[v1.Empty, v1.ListResponse](
			httpClient,
			baseURL+DockerManagerServiceListProcedure,
			connect.WithSchema(dockerManagerServiceMethods.ByName("List")),
			connect.WithClientOptions(opts...),
		),
		switchClient: connect.NewClient[v1.SwitchRequest, v1.Empty](
			httpClient,
			baseURL+DockerManagerServiceSwitchClientProcedure,
			connect.WithSchema(dockerManagerServiceMethods.ByName("switchClient")),
			connect.WithClientOptions(opts...),
		),
	}
}

// dockerManagerServiceClient implements DockerManagerServiceClient.
type dockerManagerServiceClient struct {
	list         *connect.Client[v1.Empty, v1.ListResponse]
	switchClient *connect.Client[v1.SwitchRequest, v1.Empty]
}

// List calls docker_manager.v1.DockerManagerService.List.
func (c *dockerManagerServiceClient) List(ctx context.Context, req *connect.Request[v1.Empty]) (*connect.Response[v1.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// SwitchClient calls docker_manager.v1.DockerManagerService.switchClient.
func (c *dockerManagerServiceClient) SwitchClient(ctx context.Context, req *connect.Request[v1.SwitchRequest]) (*connect.Response[v1.Empty], error) {
	return c.switchClient.CallUnary(ctx, req)
}

// DockerManagerServiceHandler is an implementation of the docker_manager.v1.DockerManagerService
// service.
type DockerManagerServiceHandler interface {
	List(context.Context, *connect.Request[v1.Empty]) (*connect.Response[v1.ListResponse], error)
	SwitchClient(context.Context, *connect.Request[v1.SwitchRequest]) (*connect.Response[v1.Empty], error)
}

// NewDockerManagerServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDockerManagerServiceHandler(svc DockerManagerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	dockerManagerServiceMethods := v1.File_docker_manager_v1_docker_manager_proto.Services().ByName("DockerManagerService").Methods()
	dockerManagerServiceListHandler := connect.NewUnaryHandler(
		DockerManagerServiceListProcedure,
		svc.List,
		connect.WithSchema(dockerManagerServiceMethods.ByName("List")),
		connect.WithHandlerOptions(opts...),
	)
	dockerManagerServiceSwitchClientHandler := connect.NewUnaryHandler(
		DockerManagerServiceSwitchClientProcedure,
		svc.SwitchClient,
		connect.WithSchema(dockerManagerServiceMethods.ByName("switchClient")),
		connect.WithHandlerOptions(opts...),
	)
	return "/docker_manager.v1.DockerManagerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DockerManagerServiceListProcedure:
			dockerManagerServiceListHandler.ServeHTTP(w, r)
		case DockerManagerServiceSwitchClientProcedure:
			dockerManagerServiceSwitchClientHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDockerManagerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDockerManagerServiceHandler struct{}

func (UnimplementedDockerManagerServiceHandler) List(context.Context, *connect.Request[v1.Empty]) (*connect.Response[v1.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("docker_manager.v1.DockerManagerService.List is not implemented"))
}

func (UnimplementedDockerManagerServiceHandler) SwitchClient(context.Context, *connect.Request[v1.SwitchRequest]) (*connect.Response[v1.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("docker_manager.v1.DockerManagerService.switchClient is not implemented"))
}
