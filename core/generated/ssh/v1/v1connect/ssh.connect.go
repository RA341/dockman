// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: ssh/v1/ssh.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/RA341/dockman/generated/ssh/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SSHServiceName is the fully-qualified name of the SSHService service.
	SSHServiceName = "ssh.v1.SSHService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SSHServiceNewClientProcedure is the fully-qualified name of the SSHService's NewClient RPC.
	SSHServiceNewClientProcedure = "/ssh.v1.SSHService/NewClient"
	// SSHServiceDeleteClientProcedure is the fully-qualified name of the SSHService's DeleteClient RPC.
	SSHServiceDeleteClientProcedure = "/ssh.v1.SSHService/DeleteClient"
	// SSHServiceListProcedure is the fully-qualified name of the SSHService's List RPC.
	SSHServiceListProcedure = "/ssh.v1.SSHService/List"
	// SSHServiceGetProcedure is the fully-qualified name of the SSHService's Get RPC.
	SSHServiceGetProcedure = "/ssh.v1.SSHService/Get"
)

// SSHServiceClient is a client for the ssh.v1.SSHService service.
type SSHServiceClient interface {
	NewClient(context.Context, *connect.Request[v1.Machine]) (*connect.Response[v1.Empty], error)
	DeleteClient(context.Context, *connect.Request[v1.Machine]) (*connect.Response[v1.Empty], error)
	List(context.Context, *connect.Request[v1.Empty]) (*connect.Response[v1.ListMachine], error)
	Get(context.Context, *connect.Request[v1.GetMachine]) (*connect.Response[v1.Machine], error)
}

// NewSSHServiceClient constructs a client for the ssh.v1.SSHService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSSHServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SSHServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	sSHServiceMethods := v1.File_ssh_v1_ssh_proto.Services().ByName("SSHService").Methods()
	return &sSHServiceClient{
		newClient: connect.NewClient[v1.Machine, v1.Empty](
			httpClient,
			baseURL+SSHServiceNewClientProcedure,
			connect.WithSchema(sSHServiceMethods.ByName("NewClient")),
			connect.WithClientOptions(opts...),
		),
		deleteClient: connect.NewClient[v1.Machine, v1.Empty](
			httpClient,
			baseURL+SSHServiceDeleteClientProcedure,
			connect.WithSchema(sSHServiceMethods.ByName("DeleteClient")),
			connect.WithClientOptions(opts...),
		),
		list: connect.NewClient[v1.Empty, v1.ListMachine](
			httpClient,
			baseURL+SSHServiceListProcedure,
			connect.WithSchema(sSHServiceMethods.ByName("List")),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[v1.GetMachine, v1.Machine](
			httpClient,
			baseURL+SSHServiceGetProcedure,
			connect.WithSchema(sSHServiceMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
	}
}

// sSHServiceClient implements SSHServiceClient.
type sSHServiceClient struct {
	newClient    *connect.Client[v1.Machine, v1.Empty]
	deleteClient *connect.Client[v1.Machine, v1.Empty]
	list         *connect.Client[v1.Empty, v1.ListMachine]
	get          *connect.Client[v1.GetMachine, v1.Machine]
}

// NewClient calls ssh.v1.SSHService.NewClient.
func (c *sSHServiceClient) NewClient(ctx context.Context, req *connect.Request[v1.Machine]) (*connect.Response[v1.Empty], error) {
	return c.newClient.CallUnary(ctx, req)
}

// DeleteClient calls ssh.v1.SSHService.DeleteClient.
func (c *sSHServiceClient) DeleteClient(ctx context.Context, req *connect.Request[v1.Machine]) (*connect.Response[v1.Empty], error) {
	return c.deleteClient.CallUnary(ctx, req)
}

// List calls ssh.v1.SSHService.List.
func (c *sSHServiceClient) List(ctx context.Context, req *connect.Request[v1.Empty]) (*connect.Response[v1.ListMachine], error) {
	return c.list.CallUnary(ctx, req)
}

// Get calls ssh.v1.SSHService.Get.
func (c *sSHServiceClient) Get(ctx context.Context, req *connect.Request[v1.GetMachine]) (*connect.Response[v1.Machine], error) {
	return c.get.CallUnary(ctx, req)
}

// SSHServiceHandler is an implementation of the ssh.v1.SSHService service.
type SSHServiceHandler interface {
	NewClient(context.Context, *connect.Request[v1.Machine]) (*connect.Response[v1.Empty], error)
	DeleteClient(context.Context, *connect.Request[v1.Machine]) (*connect.Response[v1.Empty], error)
	List(context.Context, *connect.Request[v1.Empty]) (*connect.Response[v1.ListMachine], error)
	Get(context.Context, *connect.Request[v1.GetMachine]) (*connect.Response[v1.Machine], error)
}

// NewSSHServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSSHServiceHandler(svc SSHServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	sSHServiceMethods := v1.File_ssh_v1_ssh_proto.Services().ByName("SSHService").Methods()
	sSHServiceNewClientHandler := connect.NewUnaryHandler(
		SSHServiceNewClientProcedure,
		svc.NewClient,
		connect.WithSchema(sSHServiceMethods.ByName("NewClient")),
		connect.WithHandlerOptions(opts...),
	)
	sSHServiceDeleteClientHandler := connect.NewUnaryHandler(
		SSHServiceDeleteClientProcedure,
		svc.DeleteClient,
		connect.WithSchema(sSHServiceMethods.ByName("DeleteClient")),
		connect.WithHandlerOptions(opts...),
	)
	sSHServiceListHandler := connect.NewUnaryHandler(
		SSHServiceListProcedure,
		svc.List,
		connect.WithSchema(sSHServiceMethods.ByName("List")),
		connect.WithHandlerOptions(opts...),
	)
	sSHServiceGetHandler := connect.NewUnaryHandler(
		SSHServiceGetProcedure,
		svc.Get,
		connect.WithSchema(sSHServiceMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	return "/ssh.v1.SSHService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SSHServiceNewClientProcedure:
			sSHServiceNewClientHandler.ServeHTTP(w, r)
		case SSHServiceDeleteClientProcedure:
			sSHServiceDeleteClientHandler.ServeHTTP(w, r)
		case SSHServiceListProcedure:
			sSHServiceListHandler.ServeHTTP(w, r)
		case SSHServiceGetProcedure:
			sSHServiceGetHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSSHServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSSHServiceHandler struct{}

func (UnimplementedSSHServiceHandler) NewClient(context.Context, *connect.Request[v1.Machine]) (*connect.Response[v1.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssh.v1.SSHService.NewClient is not implemented"))
}

func (UnimplementedSSHServiceHandler) DeleteClient(context.Context, *connect.Request[v1.Machine]) (*connect.Response[v1.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssh.v1.SSHService.DeleteClient is not implemented"))
}

func (UnimplementedSSHServiceHandler) List(context.Context, *connect.Request[v1.Empty]) (*connect.Response[v1.ListMachine], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssh.v1.SSHService.List is not implemented"))
}

func (UnimplementedSSHServiceHandler) Get(context.Context, *connect.Request[v1.GetMachine]) (*connect.Response[v1.Machine], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ssh.v1.SSHService.Get is not implemented"))
}
