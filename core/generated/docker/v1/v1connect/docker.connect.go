// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: docker/v1/docker.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/RA341/dockman/generated/docker/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DockerServiceName is the fully-qualified name of the DockerService service.
	DockerServiceName = "docker.v1.DockerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DockerServiceContainerStartProcedure is the fully-qualified name of the DockerService's
	// ContainerStart RPC.
	DockerServiceContainerStartProcedure = "/docker.v1.DockerService/ContainerStart"
	// DockerServiceContainerStopProcedure is the fully-qualified name of the DockerService's
	// ContainerStop RPC.
	DockerServiceContainerStopProcedure = "/docker.v1.DockerService/ContainerStop"
	// DockerServiceContainerRemoveProcedure is the fully-qualified name of the DockerService's
	// ContainerRemove RPC.
	DockerServiceContainerRemoveProcedure = "/docker.v1.DockerService/ContainerRemove"
	// DockerServiceContainerRestartProcedure is the fully-qualified name of the DockerService's
	// ContainerRestart RPC.
	DockerServiceContainerRestartProcedure = "/docker.v1.DockerService/ContainerRestart"
	// DockerServiceContainerUpdateProcedure is the fully-qualified name of the DockerService's
	// ContainerUpdate RPC.
	DockerServiceContainerUpdateProcedure = "/docker.v1.DockerService/ContainerUpdate"
	// DockerServiceContainerListProcedure is the fully-qualified name of the DockerService's
	// ContainerList RPC.
	DockerServiceContainerListProcedure = "/docker.v1.DockerService/ContainerList"
	// DockerServiceContainerStatsProcedure is the fully-qualified name of the DockerService's
	// ContainerStats RPC.
	DockerServiceContainerStatsProcedure = "/docker.v1.DockerService/ContainerStats"
	// DockerServiceContainerLogsProcedure is the fully-qualified name of the DockerService's
	// ContainerLogs RPC.
	DockerServiceContainerLogsProcedure = "/docker.v1.DockerService/ContainerLogs"
	// DockerServiceComposeStartProcedure is the fully-qualified name of the DockerService's
	// ComposeStart RPC.
	DockerServiceComposeStartProcedure = "/docker.v1.DockerService/ComposeStart"
	// DockerServiceComposeStopProcedure is the fully-qualified name of the DockerService's ComposeStop
	// RPC.
	DockerServiceComposeStopProcedure = "/docker.v1.DockerService/ComposeStop"
	// DockerServiceComposeRemoveProcedure is the fully-qualified name of the DockerService's
	// ComposeRemove RPC.
	DockerServiceComposeRemoveProcedure = "/docker.v1.DockerService/ComposeRemove"
	// DockerServiceComposeRestartProcedure is the fully-qualified name of the DockerService's
	// ComposeRestart RPC.
	DockerServiceComposeRestartProcedure = "/docker.v1.DockerService/ComposeRestart"
	// DockerServiceComposeUpdateProcedure is the fully-qualified name of the DockerService's
	// ComposeUpdate RPC.
	DockerServiceComposeUpdateProcedure = "/docker.v1.DockerService/ComposeUpdate"
	// DockerServiceComposeListProcedure is the fully-qualified name of the DockerService's ComposeList
	// RPC.
	DockerServiceComposeListProcedure = "/docker.v1.DockerService/ComposeList"
	// DockerServiceImageListProcedure is the fully-qualified name of the DockerService's ImageList RPC.
	DockerServiceImageListProcedure = "/docker.v1.DockerService/ImageList"
	// DockerServiceImageRemoveProcedure is the fully-qualified name of the DockerService's ImageRemove
	// RPC.
	DockerServiceImageRemoveProcedure = "/docker.v1.DockerService/ImageRemove"
	// DockerServiceImagePruneUnusedProcedure is the fully-qualified name of the DockerService's
	// ImagePruneUnused RPC.
	DockerServiceImagePruneUnusedProcedure = "/docker.v1.DockerService/ImagePruneUnused"
	// DockerServiceVolumeListProcedure is the fully-qualified name of the DockerService's VolumeList
	// RPC.
	DockerServiceVolumeListProcedure = "/docker.v1.DockerService/VolumeList"
	// DockerServiceVolumeCreateProcedure is the fully-qualified name of the DockerService's
	// VolumeCreate RPC.
	DockerServiceVolumeCreateProcedure = "/docker.v1.DockerService/VolumeCreate"
	// DockerServiceVolumeDeleteProcedure is the fully-qualified name of the DockerService's
	// VolumeDelete RPC.
	DockerServiceVolumeDeleteProcedure = "/docker.v1.DockerService/VolumeDelete"
	// DockerServiceNetworkListProcedure is the fully-qualified name of the DockerService's NetworkList
	// RPC.
	DockerServiceNetworkListProcedure = "/docker.v1.DockerService/NetworkList"
	// DockerServiceNetworkCreateProcedure is the fully-qualified name of the DockerService's
	// NetworkCreate RPC.
	DockerServiceNetworkCreateProcedure = "/docker.v1.DockerService/NetworkCreate"
	// DockerServiceNetworkDeleteProcedure is the fully-qualified name of the DockerService's
	// NetworkDelete RPC.
	DockerServiceNetworkDeleteProcedure = "/docker.v1.DockerService/NetworkDelete"
)

// DockerServiceClient is a client for the docker.v1.DockerService service.
type DockerServiceClient interface {
	// container
	ContainerStart(context.Context, *connect.Request[v1.ContainerRequest]) (*connect.Response[v1.LogsMessage], error)
	ContainerStop(context.Context, *connect.Request[v1.ContainerRequest]) (*connect.Response[v1.LogsMessage], error)
	ContainerRemove(context.Context, *connect.Request[v1.ContainerRequest]) (*connect.Response[v1.LogsMessage], error)
	ContainerRestart(context.Context, *connect.Request[v1.ContainerRequest]) (*connect.Response[v1.LogsMessage], error)
	ContainerUpdate(context.Context, *connect.Request[v1.ContainerRequest]) (*connect.Response[v1.Empty], error)
	ContainerList(context.Context, *connect.Request[v1.Empty]) (*connect.Response[v1.ListResponse], error)
	ContainerStats(context.Context, *connect.Request[v1.StatsRequest]) (*connect.Response[v1.StatsResponse], error)
	ContainerLogs(context.Context, *connect.Request[v1.ContainerLogsRequest]) (*connect.ServerStreamForClient[v1.LogsMessage], error)
	// compose
	ComposeStart(context.Context, *connect.Request[v1.ComposeFile]) (*connect.ServerStreamForClient[v1.LogsMessage], error)
	ComposeStop(context.Context, *connect.Request[v1.ComposeFile]) (*connect.ServerStreamForClient[v1.LogsMessage], error)
	ComposeRemove(context.Context, *connect.Request[v1.ComposeFile]) (*connect.ServerStreamForClient[v1.LogsMessage], error)
	ComposeRestart(context.Context, *connect.Request[v1.ComposeFile]) (*connect.ServerStreamForClient[v1.LogsMessage], error)
	ComposeUpdate(context.Context, *connect.Request[v1.ComposeFile]) (*connect.ServerStreamForClient[v1.LogsMessage], error)
	ComposeList(context.Context, *connect.Request[v1.ComposeFile]) (*connect.Response[v1.ListResponse], error)
	// images
	ImageList(context.Context, *connect.Request[v1.ListImagesRequest]) (*connect.Response[v1.ListImagesResponse], error)
	ImageRemove(context.Context, *connect.Request[v1.RemoveImageRequest]) (*connect.Response[v1.RemoveImageResponse], error)
	ImagePruneUnused(context.Context, *connect.Request[v1.ImagePruneRequest]) (*connect.Response[v1.ImagePruneResponse], error)
	// volumes
	VolumeList(context.Context, *connect.Request[v1.ListVolumesRequest]) (*connect.Response[v1.ListVolumesResponse], error)
	VolumeCreate(context.Context, *connect.Request[v1.CreateVolumeRequest]) (*connect.Response[v1.CreateVolumeResponse], error)
	VolumeDelete(context.Context, *connect.Request[v1.DeleteVolumeRequest]) (*connect.Response[v1.DeleteVolumeResponse], error)
	// networks
	NetworkList(context.Context, *connect.Request[v1.ListNetworksRequest]) (*connect.Response[v1.ListNetworksResponse], error)
	NetworkCreate(context.Context, *connect.Request[v1.CreateNetworkRequest]) (*connect.Response[v1.CreateNetworkResponse], error)
	NetworkDelete(context.Context, *connect.Request[v1.DeleteNetworkRequest]) (*connect.Response[v1.DeleteNetworkResponse], error)
}

// NewDockerServiceClient constructs a client for the docker.v1.DockerService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDockerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DockerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	dockerServiceMethods := v1.File_docker_v1_docker_proto.Services().ByName("DockerService").Methods()
	return &dockerServiceClient{
		containerStart: connect.NewClient[v1.ContainerRequest, v1.LogsMessage](
			httpClient,
			baseURL+DockerServiceContainerStartProcedure,
			connect.WithSchema(dockerServiceMethods.ByName("ContainerStart")),
			connect.WithClientOptions(opts...),
		),
		containerStop: connect.NewClient[v1.ContainerRequest, v1.LogsMessage](
			httpClient,
			baseURL+DockerServiceContainerStopProcedure,
			connect.WithSchema(dockerServiceMethods.ByName("ContainerStop")),
			connect.WithClientOptions(opts...),
		),
		containerRemove: connect.NewClient[v1.ContainerRequest, v1.LogsMessage](
			httpClient,
			baseURL+DockerServiceContainerRemoveProcedure,
			connect.WithSchema(dockerServiceMethods.ByName("ContainerRemove")),
			connect.WithClientOptions(opts...),
		),
		containerRestart: connect.NewClient[v1.ContainerRequest, v1.LogsMessage](
			httpClient,
			baseURL+DockerServiceContainerRestartProcedure,
			connect.WithSchema(dockerServiceMethods.ByName("ContainerRestart")),
			connect.WithClientOptions(opts...),
		),
		containerUpdate: connect.NewClient[v1.ContainerRequest, v1.Empty](
			httpClient,
			baseURL+DockerServiceContainerUpdateProcedure,
			connect.WithSchema(dockerServiceMethods.ByName("ContainerUpdate")),
			connect.WithClientOptions(opts...),
		),
		containerList: connect.NewClient[v1.Empty, v1.ListResponse](
			httpClient,
			baseURL+DockerServiceContainerListProcedure,
			connect.WithSchema(dockerServiceMethods.ByName("ContainerList")),
			connect.WithClientOptions(opts...),
		),
		containerStats: connect.NewClient[v1.StatsRequest, v1.StatsResponse](
			httpClient,
			baseURL+DockerServiceContainerStatsProcedure,
			connect.WithSchema(dockerServiceMethods.ByName("ContainerStats")),
			connect.WithClientOptions(opts...),
		),
		containerLogs: connect.NewClient[v1.ContainerLogsRequest, v1.LogsMessage](
			httpClient,
			baseURL+DockerServiceContainerLogsProcedure,
			connect.WithSchema(dockerServiceMethods.ByName("ContainerLogs")),
			connect.WithClientOptions(opts...),
		),
		composeStart: connect.NewClient[v1.ComposeFile, v1.LogsMessage](
			httpClient,
			baseURL+DockerServiceComposeStartProcedure,
			connect.WithSchema(dockerServiceMethods.ByName("ComposeStart")),
			connect.WithClientOptions(opts...),
		),
		composeStop: connect.NewClient[v1.ComposeFile, v1.LogsMessage](
			httpClient,
			baseURL+DockerServiceComposeStopProcedure,
			connect.WithSchema(dockerServiceMethods.ByName("ComposeStop")),
			connect.WithClientOptions(opts...),
		),
		composeRemove: connect.NewClient[v1.ComposeFile, v1.LogsMessage](
			httpClient,
			baseURL+DockerServiceComposeRemoveProcedure,
			connect.WithSchema(dockerServiceMethods.ByName("ComposeRemove")),
			connect.WithClientOptions(opts...),
		),
		composeRestart: connect.NewClient[v1.ComposeFile, v1.LogsMessage](
			httpClient,
			baseURL+DockerServiceComposeRestartProcedure,
			connect.WithSchema(dockerServiceMethods.ByName("ComposeRestart")),
			connect.WithClientOptions(opts...),
		),
		composeUpdate: connect.NewClient[v1.ComposeFile, v1.LogsMessage](
			httpClient,
			baseURL+DockerServiceComposeUpdateProcedure,
			connect.WithSchema(dockerServiceMethods.ByName("ComposeUpdate")),
			connect.WithClientOptions(opts...),
		),
		composeList: connect.NewClient[v1.ComposeFile, v1.ListResponse](
			httpClient,
			baseURL+DockerServiceComposeListProcedure,
			connect.WithSchema(dockerServiceMethods.ByName("ComposeList")),
			connect.WithClientOptions(opts...),
		),
		imageList: connect.NewClient[v1.ListImagesRequest, v1.ListImagesResponse](
			httpClient,
			baseURL+DockerServiceImageListProcedure,
			connect.WithSchema(dockerServiceMethods.ByName("ImageList")),
			connect.WithClientOptions(opts...),
		),
		imageRemove: connect.NewClient[v1.RemoveImageRequest, v1.RemoveImageResponse](
			httpClient,
			baseURL+DockerServiceImageRemoveProcedure,
			connect.WithSchema(dockerServiceMethods.ByName("ImageRemove")),
			connect.WithClientOptions(opts...),
		),
		imagePruneUnused: connect.NewClient[v1.ImagePruneRequest, v1.ImagePruneResponse](
			httpClient,
			baseURL+DockerServiceImagePruneUnusedProcedure,
			connect.WithSchema(dockerServiceMethods.ByName("ImagePruneUnused")),
			connect.WithClientOptions(opts...),
		),
		volumeList: connect.NewClient[v1.ListVolumesRequest, v1.ListVolumesResponse](
			httpClient,
			baseURL+DockerServiceVolumeListProcedure,
			connect.WithSchema(dockerServiceMethods.ByName("VolumeList")),
			connect.WithClientOptions(opts...),
		),
		volumeCreate: connect.NewClient[v1.CreateVolumeRequest, v1.CreateVolumeResponse](
			httpClient,
			baseURL+DockerServiceVolumeCreateProcedure,
			connect.WithSchema(dockerServiceMethods.ByName("VolumeCreate")),
			connect.WithClientOptions(opts...),
		),
		volumeDelete: connect.NewClient[v1.DeleteVolumeRequest, v1.DeleteVolumeResponse](
			httpClient,
			baseURL+DockerServiceVolumeDeleteProcedure,
			connect.WithSchema(dockerServiceMethods.ByName("VolumeDelete")),
			connect.WithClientOptions(opts...),
		),
		networkList: connect.NewClient[v1.ListNetworksRequest, v1.ListNetworksResponse](
			httpClient,
			baseURL+DockerServiceNetworkListProcedure,
			connect.WithSchema(dockerServiceMethods.ByName("NetworkList")),
			connect.WithClientOptions(opts...),
		),
		networkCreate: connect.NewClient[v1.CreateNetworkRequest, v1.CreateNetworkResponse](
			httpClient,
			baseURL+DockerServiceNetworkCreateProcedure,
			connect.WithSchema(dockerServiceMethods.ByName("NetworkCreate")),
			connect.WithClientOptions(opts...),
		),
		networkDelete: connect.NewClient[v1.DeleteNetworkRequest, v1.DeleteNetworkResponse](
			httpClient,
			baseURL+DockerServiceNetworkDeleteProcedure,
			connect.WithSchema(dockerServiceMethods.ByName("NetworkDelete")),
			connect.WithClientOptions(opts...),
		),
	}
}

// dockerServiceClient implements DockerServiceClient.
type dockerServiceClient struct {
	containerStart   *connect.Client[v1.ContainerRequest, v1.LogsMessage]
	containerStop    *connect.Client[v1.ContainerRequest, v1.LogsMessage]
	containerRemove  *connect.Client[v1.ContainerRequest, v1.LogsMessage]
	containerRestart *connect.Client[v1.ContainerRequest, v1.LogsMessage]
	containerUpdate  *connect.Client[v1.ContainerRequest, v1.Empty]
	containerList    *connect.Client[v1.Empty, v1.ListResponse]
	containerStats   *connect.Client[v1.StatsRequest, v1.StatsResponse]
	containerLogs    *connect.Client[v1.ContainerLogsRequest, v1.LogsMessage]
	composeStart     *connect.Client[v1.ComposeFile, v1.LogsMessage]
	composeStop      *connect.Client[v1.ComposeFile, v1.LogsMessage]
	composeRemove    *connect.Client[v1.ComposeFile, v1.LogsMessage]
	composeRestart   *connect.Client[v1.ComposeFile, v1.LogsMessage]
	composeUpdate    *connect.Client[v1.ComposeFile, v1.LogsMessage]
	composeList      *connect.Client[v1.ComposeFile, v1.ListResponse]
	imageList        *connect.Client[v1.ListImagesRequest, v1.ListImagesResponse]
	imageRemove      *connect.Client[v1.RemoveImageRequest, v1.RemoveImageResponse]
	imagePruneUnused *connect.Client[v1.ImagePruneRequest, v1.ImagePruneResponse]
	volumeList       *connect.Client[v1.ListVolumesRequest, v1.ListVolumesResponse]
	volumeCreate     *connect.Client[v1.CreateVolumeRequest, v1.CreateVolumeResponse]
	volumeDelete     *connect.Client[v1.DeleteVolumeRequest, v1.DeleteVolumeResponse]
	networkList      *connect.Client[v1.ListNetworksRequest, v1.ListNetworksResponse]
	networkCreate    *connect.Client[v1.CreateNetworkRequest, v1.CreateNetworkResponse]
	networkDelete    *connect.Client[v1.DeleteNetworkRequest, v1.DeleteNetworkResponse]
}

// ContainerStart calls docker.v1.DockerService.ContainerStart.
func (c *dockerServiceClient) ContainerStart(ctx context.Context, req *connect.Request[v1.ContainerRequest]) (*connect.Response[v1.LogsMessage], error) {
	return c.containerStart.CallUnary(ctx, req)
}

// ContainerStop calls docker.v1.DockerService.ContainerStop.
func (c *dockerServiceClient) ContainerStop(ctx context.Context, req *connect.Request[v1.ContainerRequest]) (*connect.Response[v1.LogsMessage], error) {
	return c.containerStop.CallUnary(ctx, req)
}

// ContainerRemove calls docker.v1.DockerService.ContainerRemove.
func (c *dockerServiceClient) ContainerRemove(ctx context.Context, req *connect.Request[v1.ContainerRequest]) (*connect.Response[v1.LogsMessage], error) {
	return c.containerRemove.CallUnary(ctx, req)
}

// ContainerRestart calls docker.v1.DockerService.ContainerRestart.
func (c *dockerServiceClient) ContainerRestart(ctx context.Context, req *connect.Request[v1.ContainerRequest]) (*connect.Response[v1.LogsMessage], error) {
	return c.containerRestart.CallUnary(ctx, req)
}

// ContainerUpdate calls docker.v1.DockerService.ContainerUpdate.
func (c *dockerServiceClient) ContainerUpdate(ctx context.Context, req *connect.Request[v1.ContainerRequest]) (*connect.Response[v1.Empty], error) {
	return c.containerUpdate.CallUnary(ctx, req)
}

// ContainerList calls docker.v1.DockerService.ContainerList.
func (c *dockerServiceClient) ContainerList(ctx context.Context, req *connect.Request[v1.Empty]) (*connect.Response[v1.ListResponse], error) {
	return c.containerList.CallUnary(ctx, req)
}

// ContainerStats calls docker.v1.DockerService.ContainerStats.
func (c *dockerServiceClient) ContainerStats(ctx context.Context, req *connect.Request[v1.StatsRequest]) (*connect.Response[v1.StatsResponse], error) {
	return c.containerStats.CallUnary(ctx, req)
}

// ContainerLogs calls docker.v1.DockerService.ContainerLogs.
func (c *dockerServiceClient) ContainerLogs(ctx context.Context, req *connect.Request[v1.ContainerLogsRequest]) (*connect.ServerStreamForClient[v1.LogsMessage], error) {
	return c.containerLogs.CallServerStream(ctx, req)
}

// ComposeStart calls docker.v1.DockerService.ComposeStart.
func (c *dockerServiceClient) ComposeStart(ctx context.Context, req *connect.Request[v1.ComposeFile]) (*connect.ServerStreamForClient[v1.LogsMessage], error) {
	return c.composeStart.CallServerStream(ctx, req)
}

// ComposeStop calls docker.v1.DockerService.ComposeStop.
func (c *dockerServiceClient) ComposeStop(ctx context.Context, req *connect.Request[v1.ComposeFile]) (*connect.ServerStreamForClient[v1.LogsMessage], error) {
	return c.composeStop.CallServerStream(ctx, req)
}

// ComposeRemove calls docker.v1.DockerService.ComposeRemove.
func (c *dockerServiceClient) ComposeRemove(ctx context.Context, req *connect.Request[v1.ComposeFile]) (*connect.ServerStreamForClient[v1.LogsMessage], error) {
	return c.composeRemove.CallServerStream(ctx, req)
}

// ComposeRestart calls docker.v1.DockerService.ComposeRestart.
func (c *dockerServiceClient) ComposeRestart(ctx context.Context, req *connect.Request[v1.ComposeFile]) (*connect.ServerStreamForClient[v1.LogsMessage], error) {
	return c.composeRestart.CallServerStream(ctx, req)
}

// ComposeUpdate calls docker.v1.DockerService.ComposeUpdate.
func (c *dockerServiceClient) ComposeUpdate(ctx context.Context, req *connect.Request[v1.ComposeFile]) (*connect.ServerStreamForClient[v1.LogsMessage], error) {
	return c.composeUpdate.CallServerStream(ctx, req)
}

// ComposeList calls docker.v1.DockerService.ComposeList.
func (c *dockerServiceClient) ComposeList(ctx context.Context, req *connect.Request[v1.ComposeFile]) (*connect.Response[v1.ListResponse], error) {
	return c.composeList.CallUnary(ctx, req)
}

// ImageList calls docker.v1.DockerService.ImageList.
func (c *dockerServiceClient) ImageList(ctx context.Context, req *connect.Request[v1.ListImagesRequest]) (*connect.Response[v1.ListImagesResponse], error) {
	return c.imageList.CallUnary(ctx, req)
}

// ImageRemove calls docker.v1.DockerService.ImageRemove.
func (c *dockerServiceClient) ImageRemove(ctx context.Context, req *connect.Request[v1.RemoveImageRequest]) (*connect.Response[v1.RemoveImageResponse], error) {
	return c.imageRemove.CallUnary(ctx, req)
}

// ImagePruneUnused calls docker.v1.DockerService.ImagePruneUnused.
func (c *dockerServiceClient) ImagePruneUnused(ctx context.Context, req *connect.Request[v1.ImagePruneRequest]) (*connect.Response[v1.ImagePruneResponse], error) {
	return c.imagePruneUnused.CallUnary(ctx, req)
}

// VolumeList calls docker.v1.DockerService.VolumeList.
func (c *dockerServiceClient) VolumeList(ctx context.Context, req *connect.Request[v1.ListVolumesRequest]) (*connect.Response[v1.ListVolumesResponse], error) {
	return c.volumeList.CallUnary(ctx, req)
}

// VolumeCreate calls docker.v1.DockerService.VolumeCreate.
func (c *dockerServiceClient) VolumeCreate(ctx context.Context, req *connect.Request[v1.CreateVolumeRequest]) (*connect.Response[v1.CreateVolumeResponse], error) {
	return c.volumeCreate.CallUnary(ctx, req)
}

// VolumeDelete calls docker.v1.DockerService.VolumeDelete.
func (c *dockerServiceClient) VolumeDelete(ctx context.Context, req *connect.Request[v1.DeleteVolumeRequest]) (*connect.Response[v1.DeleteVolumeResponse], error) {
	return c.volumeDelete.CallUnary(ctx, req)
}

// NetworkList calls docker.v1.DockerService.NetworkList.
func (c *dockerServiceClient) NetworkList(ctx context.Context, req *connect.Request[v1.ListNetworksRequest]) (*connect.Response[v1.ListNetworksResponse], error) {
	return c.networkList.CallUnary(ctx, req)
}

// NetworkCreate calls docker.v1.DockerService.NetworkCreate.
func (c *dockerServiceClient) NetworkCreate(ctx context.Context, req *connect.Request[v1.CreateNetworkRequest]) (*connect.Response[v1.CreateNetworkResponse], error) {
	return c.networkCreate.CallUnary(ctx, req)
}

// NetworkDelete calls docker.v1.DockerService.NetworkDelete.
func (c *dockerServiceClient) NetworkDelete(ctx context.Context, req *connect.Request[v1.DeleteNetworkRequest]) (*connect.Response[v1.DeleteNetworkResponse], error) {
	return c.networkDelete.CallUnary(ctx, req)
}

// DockerServiceHandler is an implementation of the docker.v1.DockerService service.
type DockerServiceHandler interface {
	// container
	ContainerStart(context.Context, *connect.Request[v1.ContainerRequest]) (*connect.Response[v1.LogsMessage], error)
	ContainerStop(context.Context, *connect.Request[v1.ContainerRequest]) (*connect.Response[v1.LogsMessage], error)
	ContainerRemove(context.Context, *connect.Request[v1.ContainerRequest]) (*connect.Response[v1.LogsMessage], error)
	ContainerRestart(context.Context, *connect.Request[v1.ContainerRequest]) (*connect.Response[v1.LogsMessage], error)
	ContainerUpdate(context.Context, *connect.Request[v1.ContainerRequest]) (*connect.Response[v1.Empty], error)
	ContainerList(context.Context, *connect.Request[v1.Empty]) (*connect.Response[v1.ListResponse], error)
	ContainerStats(context.Context, *connect.Request[v1.StatsRequest]) (*connect.Response[v1.StatsResponse], error)
	ContainerLogs(context.Context, *connect.Request[v1.ContainerLogsRequest], *connect.ServerStream[v1.LogsMessage]) error
	// compose
	ComposeStart(context.Context, *connect.Request[v1.ComposeFile], *connect.ServerStream[v1.LogsMessage]) error
	ComposeStop(context.Context, *connect.Request[v1.ComposeFile], *connect.ServerStream[v1.LogsMessage]) error
	ComposeRemove(context.Context, *connect.Request[v1.ComposeFile], *connect.ServerStream[v1.LogsMessage]) error
	ComposeRestart(context.Context, *connect.Request[v1.ComposeFile], *connect.ServerStream[v1.LogsMessage]) error
	ComposeUpdate(context.Context, *connect.Request[v1.ComposeFile], *connect.ServerStream[v1.LogsMessage]) error
	ComposeList(context.Context, *connect.Request[v1.ComposeFile]) (*connect.Response[v1.ListResponse], error)
	// images
	ImageList(context.Context, *connect.Request[v1.ListImagesRequest]) (*connect.Response[v1.ListImagesResponse], error)
	ImageRemove(context.Context, *connect.Request[v1.RemoveImageRequest]) (*connect.Response[v1.RemoveImageResponse], error)
	ImagePruneUnused(context.Context, *connect.Request[v1.ImagePruneRequest]) (*connect.Response[v1.ImagePruneResponse], error)
	// volumes
	VolumeList(context.Context, *connect.Request[v1.ListVolumesRequest]) (*connect.Response[v1.ListVolumesResponse], error)
	VolumeCreate(context.Context, *connect.Request[v1.CreateVolumeRequest]) (*connect.Response[v1.CreateVolumeResponse], error)
	VolumeDelete(context.Context, *connect.Request[v1.DeleteVolumeRequest]) (*connect.Response[v1.DeleteVolumeResponse], error)
	// networks
	NetworkList(context.Context, *connect.Request[v1.ListNetworksRequest]) (*connect.Response[v1.ListNetworksResponse], error)
	NetworkCreate(context.Context, *connect.Request[v1.CreateNetworkRequest]) (*connect.Response[v1.CreateNetworkResponse], error)
	NetworkDelete(context.Context, *connect.Request[v1.DeleteNetworkRequest]) (*connect.Response[v1.DeleteNetworkResponse], error)
}

// NewDockerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDockerServiceHandler(svc DockerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	dockerServiceMethods := v1.File_docker_v1_docker_proto.Services().ByName("DockerService").Methods()
	dockerServiceContainerStartHandler := connect.NewUnaryHandler(
		DockerServiceContainerStartProcedure,
		svc.ContainerStart,
		connect.WithSchema(dockerServiceMethods.ByName("ContainerStart")),
		connect.WithHandlerOptions(opts...),
	)
	dockerServiceContainerStopHandler := connect.NewUnaryHandler(
		DockerServiceContainerStopProcedure,
		svc.ContainerStop,
		connect.WithSchema(dockerServiceMethods.ByName("ContainerStop")),
		connect.WithHandlerOptions(opts...),
	)
	dockerServiceContainerRemoveHandler := connect.NewUnaryHandler(
		DockerServiceContainerRemoveProcedure,
		svc.ContainerRemove,
		connect.WithSchema(dockerServiceMethods.ByName("ContainerRemove")),
		connect.WithHandlerOptions(opts...),
	)
	dockerServiceContainerRestartHandler := connect.NewUnaryHandler(
		DockerServiceContainerRestartProcedure,
		svc.ContainerRestart,
		connect.WithSchema(dockerServiceMethods.ByName("ContainerRestart")),
		connect.WithHandlerOptions(opts...),
	)
	dockerServiceContainerUpdateHandler := connect.NewUnaryHandler(
		DockerServiceContainerUpdateProcedure,
		svc.ContainerUpdate,
		connect.WithSchema(dockerServiceMethods.ByName("ContainerUpdate")),
		connect.WithHandlerOptions(opts...),
	)
	dockerServiceContainerListHandler := connect.NewUnaryHandler(
		DockerServiceContainerListProcedure,
		svc.ContainerList,
		connect.WithSchema(dockerServiceMethods.ByName("ContainerList")),
		connect.WithHandlerOptions(opts...),
	)
	dockerServiceContainerStatsHandler := connect.NewUnaryHandler(
		DockerServiceContainerStatsProcedure,
		svc.ContainerStats,
		connect.WithSchema(dockerServiceMethods.ByName("ContainerStats")),
		connect.WithHandlerOptions(opts...),
	)
	dockerServiceContainerLogsHandler := connect.NewServerStreamHandler(
		DockerServiceContainerLogsProcedure,
		svc.ContainerLogs,
		connect.WithSchema(dockerServiceMethods.ByName("ContainerLogs")),
		connect.WithHandlerOptions(opts...),
	)
	dockerServiceComposeStartHandler := connect.NewServerStreamHandler(
		DockerServiceComposeStartProcedure,
		svc.ComposeStart,
		connect.WithSchema(dockerServiceMethods.ByName("ComposeStart")),
		connect.WithHandlerOptions(opts...),
	)
	dockerServiceComposeStopHandler := connect.NewServerStreamHandler(
		DockerServiceComposeStopProcedure,
		svc.ComposeStop,
		connect.WithSchema(dockerServiceMethods.ByName("ComposeStop")),
		connect.WithHandlerOptions(opts...),
	)
	dockerServiceComposeRemoveHandler := connect.NewServerStreamHandler(
		DockerServiceComposeRemoveProcedure,
		svc.ComposeRemove,
		connect.WithSchema(dockerServiceMethods.ByName("ComposeRemove")),
		connect.WithHandlerOptions(opts...),
	)
	dockerServiceComposeRestartHandler := connect.NewServerStreamHandler(
		DockerServiceComposeRestartProcedure,
		svc.ComposeRestart,
		connect.WithSchema(dockerServiceMethods.ByName("ComposeRestart")),
		connect.WithHandlerOptions(opts...),
	)
	dockerServiceComposeUpdateHandler := connect.NewServerStreamHandler(
		DockerServiceComposeUpdateProcedure,
		svc.ComposeUpdate,
		connect.WithSchema(dockerServiceMethods.ByName("ComposeUpdate")),
		connect.WithHandlerOptions(opts...),
	)
	dockerServiceComposeListHandler := connect.NewUnaryHandler(
		DockerServiceComposeListProcedure,
		svc.ComposeList,
		connect.WithSchema(dockerServiceMethods.ByName("ComposeList")),
		connect.WithHandlerOptions(opts...),
	)
	dockerServiceImageListHandler := connect.NewUnaryHandler(
		DockerServiceImageListProcedure,
		svc.ImageList,
		connect.WithSchema(dockerServiceMethods.ByName("ImageList")),
		connect.WithHandlerOptions(opts...),
	)
	dockerServiceImageRemoveHandler := connect.NewUnaryHandler(
		DockerServiceImageRemoveProcedure,
		svc.ImageRemove,
		connect.WithSchema(dockerServiceMethods.ByName("ImageRemove")),
		connect.WithHandlerOptions(opts...),
	)
	dockerServiceImagePruneUnusedHandler := connect.NewUnaryHandler(
		DockerServiceImagePruneUnusedProcedure,
		svc.ImagePruneUnused,
		connect.WithSchema(dockerServiceMethods.ByName("ImagePruneUnused")),
		connect.WithHandlerOptions(opts...),
	)
	dockerServiceVolumeListHandler := connect.NewUnaryHandler(
		DockerServiceVolumeListProcedure,
		svc.VolumeList,
		connect.WithSchema(dockerServiceMethods.ByName("VolumeList")),
		connect.WithHandlerOptions(opts...),
	)
	dockerServiceVolumeCreateHandler := connect.NewUnaryHandler(
		DockerServiceVolumeCreateProcedure,
		svc.VolumeCreate,
		connect.WithSchema(dockerServiceMethods.ByName("VolumeCreate")),
		connect.WithHandlerOptions(opts...),
	)
	dockerServiceVolumeDeleteHandler := connect.NewUnaryHandler(
		DockerServiceVolumeDeleteProcedure,
		svc.VolumeDelete,
		connect.WithSchema(dockerServiceMethods.ByName("VolumeDelete")),
		connect.WithHandlerOptions(opts...),
	)
	dockerServiceNetworkListHandler := connect.NewUnaryHandler(
		DockerServiceNetworkListProcedure,
		svc.NetworkList,
		connect.WithSchema(dockerServiceMethods.ByName("NetworkList")),
		connect.WithHandlerOptions(opts...),
	)
	dockerServiceNetworkCreateHandler := connect.NewUnaryHandler(
		DockerServiceNetworkCreateProcedure,
		svc.NetworkCreate,
		connect.WithSchema(dockerServiceMethods.ByName("NetworkCreate")),
		connect.WithHandlerOptions(opts...),
	)
	dockerServiceNetworkDeleteHandler := connect.NewUnaryHandler(
		DockerServiceNetworkDeleteProcedure,
		svc.NetworkDelete,
		connect.WithSchema(dockerServiceMethods.ByName("NetworkDelete")),
		connect.WithHandlerOptions(opts...),
	)
	return "/docker.v1.DockerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DockerServiceContainerStartProcedure:
			dockerServiceContainerStartHandler.ServeHTTP(w, r)
		case DockerServiceContainerStopProcedure:
			dockerServiceContainerStopHandler.ServeHTTP(w, r)
		case DockerServiceContainerRemoveProcedure:
			dockerServiceContainerRemoveHandler.ServeHTTP(w, r)
		case DockerServiceContainerRestartProcedure:
			dockerServiceContainerRestartHandler.ServeHTTP(w, r)
		case DockerServiceContainerUpdateProcedure:
			dockerServiceContainerUpdateHandler.ServeHTTP(w, r)
		case DockerServiceContainerListProcedure:
			dockerServiceContainerListHandler.ServeHTTP(w, r)
		case DockerServiceContainerStatsProcedure:
			dockerServiceContainerStatsHandler.ServeHTTP(w, r)
		case DockerServiceContainerLogsProcedure:
			dockerServiceContainerLogsHandler.ServeHTTP(w, r)
		case DockerServiceComposeStartProcedure:
			dockerServiceComposeStartHandler.ServeHTTP(w, r)
		case DockerServiceComposeStopProcedure:
			dockerServiceComposeStopHandler.ServeHTTP(w, r)
		case DockerServiceComposeRemoveProcedure:
			dockerServiceComposeRemoveHandler.ServeHTTP(w, r)
		case DockerServiceComposeRestartProcedure:
			dockerServiceComposeRestartHandler.ServeHTTP(w, r)
		case DockerServiceComposeUpdateProcedure:
			dockerServiceComposeUpdateHandler.ServeHTTP(w, r)
		case DockerServiceComposeListProcedure:
			dockerServiceComposeListHandler.ServeHTTP(w, r)
		case DockerServiceImageListProcedure:
			dockerServiceImageListHandler.ServeHTTP(w, r)
		case DockerServiceImageRemoveProcedure:
			dockerServiceImageRemoveHandler.ServeHTTP(w, r)
		case DockerServiceImagePruneUnusedProcedure:
			dockerServiceImagePruneUnusedHandler.ServeHTTP(w, r)
		case DockerServiceVolumeListProcedure:
			dockerServiceVolumeListHandler.ServeHTTP(w, r)
		case DockerServiceVolumeCreateProcedure:
			dockerServiceVolumeCreateHandler.ServeHTTP(w, r)
		case DockerServiceVolumeDeleteProcedure:
			dockerServiceVolumeDeleteHandler.ServeHTTP(w, r)
		case DockerServiceNetworkListProcedure:
			dockerServiceNetworkListHandler.ServeHTTP(w, r)
		case DockerServiceNetworkCreateProcedure:
			dockerServiceNetworkCreateHandler.ServeHTTP(w, r)
		case DockerServiceNetworkDeleteProcedure:
			dockerServiceNetworkDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDockerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDockerServiceHandler struct{}

func (UnimplementedDockerServiceHandler) ContainerStart(context.Context, *connect.Request[v1.ContainerRequest]) (*connect.Response[v1.LogsMessage], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("docker.v1.DockerService.ContainerStart is not implemented"))
}

func (UnimplementedDockerServiceHandler) ContainerStop(context.Context, *connect.Request[v1.ContainerRequest]) (*connect.Response[v1.LogsMessage], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("docker.v1.DockerService.ContainerStop is not implemented"))
}

func (UnimplementedDockerServiceHandler) ContainerRemove(context.Context, *connect.Request[v1.ContainerRequest]) (*connect.Response[v1.LogsMessage], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("docker.v1.DockerService.ContainerRemove is not implemented"))
}

func (UnimplementedDockerServiceHandler) ContainerRestart(context.Context, *connect.Request[v1.ContainerRequest]) (*connect.Response[v1.LogsMessage], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("docker.v1.DockerService.ContainerRestart is not implemented"))
}

func (UnimplementedDockerServiceHandler) ContainerUpdate(context.Context, *connect.Request[v1.ContainerRequest]) (*connect.Response[v1.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("docker.v1.DockerService.ContainerUpdate is not implemented"))
}

func (UnimplementedDockerServiceHandler) ContainerList(context.Context, *connect.Request[v1.Empty]) (*connect.Response[v1.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("docker.v1.DockerService.ContainerList is not implemented"))
}

func (UnimplementedDockerServiceHandler) ContainerStats(context.Context, *connect.Request[v1.StatsRequest]) (*connect.Response[v1.StatsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("docker.v1.DockerService.ContainerStats is not implemented"))
}

func (UnimplementedDockerServiceHandler) ContainerLogs(context.Context, *connect.Request[v1.ContainerLogsRequest], *connect.ServerStream[v1.LogsMessage]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("docker.v1.DockerService.ContainerLogs is not implemented"))
}

func (UnimplementedDockerServiceHandler) ComposeStart(context.Context, *connect.Request[v1.ComposeFile], *connect.ServerStream[v1.LogsMessage]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("docker.v1.DockerService.ComposeStart is not implemented"))
}

func (UnimplementedDockerServiceHandler) ComposeStop(context.Context, *connect.Request[v1.ComposeFile], *connect.ServerStream[v1.LogsMessage]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("docker.v1.DockerService.ComposeStop is not implemented"))
}

func (UnimplementedDockerServiceHandler) ComposeRemove(context.Context, *connect.Request[v1.ComposeFile], *connect.ServerStream[v1.LogsMessage]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("docker.v1.DockerService.ComposeRemove is not implemented"))
}

func (UnimplementedDockerServiceHandler) ComposeRestart(context.Context, *connect.Request[v1.ComposeFile], *connect.ServerStream[v1.LogsMessage]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("docker.v1.DockerService.ComposeRestart is not implemented"))
}

func (UnimplementedDockerServiceHandler) ComposeUpdate(context.Context, *connect.Request[v1.ComposeFile], *connect.ServerStream[v1.LogsMessage]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("docker.v1.DockerService.ComposeUpdate is not implemented"))
}

func (UnimplementedDockerServiceHandler) ComposeList(context.Context, *connect.Request[v1.ComposeFile]) (*connect.Response[v1.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("docker.v1.DockerService.ComposeList is not implemented"))
}

func (UnimplementedDockerServiceHandler) ImageList(context.Context, *connect.Request[v1.ListImagesRequest]) (*connect.Response[v1.ListImagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("docker.v1.DockerService.ImageList is not implemented"))
}

func (UnimplementedDockerServiceHandler) ImageRemove(context.Context, *connect.Request[v1.RemoveImageRequest]) (*connect.Response[v1.RemoveImageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("docker.v1.DockerService.ImageRemove is not implemented"))
}

func (UnimplementedDockerServiceHandler) ImagePruneUnused(context.Context, *connect.Request[v1.ImagePruneRequest]) (*connect.Response[v1.ImagePruneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("docker.v1.DockerService.ImagePruneUnused is not implemented"))
}

func (UnimplementedDockerServiceHandler) VolumeList(context.Context, *connect.Request[v1.ListVolumesRequest]) (*connect.Response[v1.ListVolumesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("docker.v1.DockerService.VolumeList is not implemented"))
}

func (UnimplementedDockerServiceHandler) VolumeCreate(context.Context, *connect.Request[v1.CreateVolumeRequest]) (*connect.Response[v1.CreateVolumeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("docker.v1.DockerService.VolumeCreate is not implemented"))
}

func (UnimplementedDockerServiceHandler) VolumeDelete(context.Context, *connect.Request[v1.DeleteVolumeRequest]) (*connect.Response[v1.DeleteVolumeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("docker.v1.DockerService.VolumeDelete is not implemented"))
}

func (UnimplementedDockerServiceHandler) NetworkList(context.Context, *connect.Request[v1.ListNetworksRequest]) (*connect.Response[v1.ListNetworksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("docker.v1.DockerService.NetworkList is not implemented"))
}

func (UnimplementedDockerServiceHandler) NetworkCreate(context.Context, *connect.Request[v1.CreateNetworkRequest]) (*connect.Response[v1.CreateNetworkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("docker.v1.DockerService.NetworkCreate is not implemented"))
}

func (UnimplementedDockerServiceHandler) NetworkDelete(context.Context, *connect.Request[v1.DeleteNetworkRequest]) (*connect.Response[v1.DeleteNetworkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("docker.v1.DockerService.NetworkDelete is not implemented"))
}
