// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: info/v1/info.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/RA341/dockman/generated/info/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// InfoServiceName is the fully-qualified name of the InfoService service.
	InfoServiceName = "info.v1.InfoService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// InfoServiceGetChangelogProcedure is the fully-qualified name of the InfoService's GetChangelog
	// RPC.
	InfoServiceGetChangelogProcedure = "/info.v1.InfoService/GetChangelog"
	// InfoServiceGetAppInfoProcedure is the fully-qualified name of the InfoService's GetAppInfo RPC.
	InfoServiceGetAppInfoProcedure = "/info.v1.InfoService/GetAppInfo"
	// InfoServiceReadVersionProcedure is the fully-qualified name of the InfoService's ReadVersion RPC.
	InfoServiceReadVersionProcedure = "/info.v1.InfoService/ReadVersion"
)

// InfoServiceClient is a client for the info.v1.InfoService service.
type InfoServiceClient interface {
	GetChangelog(context.Context, *connect.Request[v1.Empty]) (*connect.Response[v1.Changelog], error)
	GetAppInfo(context.Context, *connect.Request[v1.Empty]) (*connect.Response[v1.AppInfo], error)
	ReadVersion(context.Context, *connect.Request[v1.ReadVersionRequest]) (*connect.Response[v1.Empty], error)
}

// NewInfoServiceClient constructs a client for the info.v1.InfoService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInfoServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) InfoServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	infoServiceMethods := v1.File_info_v1_info_proto.Services().ByName("InfoService").Methods()
	return &infoServiceClient{
		getChangelog: connect.NewClient[v1.Empty, v1.Changelog](
			httpClient,
			baseURL+InfoServiceGetChangelogProcedure,
			connect.WithSchema(infoServiceMethods.ByName("GetChangelog")),
			connect.WithClientOptions(opts...),
		),
		getAppInfo: connect.NewClient[v1.Empty, v1.AppInfo](
			httpClient,
			baseURL+InfoServiceGetAppInfoProcedure,
			connect.WithSchema(infoServiceMethods.ByName("GetAppInfo")),
			connect.WithClientOptions(opts...),
		),
		readVersion: connect.NewClient[v1.ReadVersionRequest, v1.Empty](
			httpClient,
			baseURL+InfoServiceReadVersionProcedure,
			connect.WithSchema(infoServiceMethods.ByName("ReadVersion")),
			connect.WithClientOptions(opts...),
		),
	}
}

// infoServiceClient implements InfoServiceClient.
type infoServiceClient struct {
	getChangelog *connect.Client[v1.Empty, v1.Changelog]
	getAppInfo   *connect.Client[v1.Empty, v1.AppInfo]
	readVersion  *connect.Client[v1.ReadVersionRequest, v1.Empty]
}

// GetChangelog calls info.v1.InfoService.GetChangelog.
func (c *infoServiceClient) GetChangelog(ctx context.Context, req *connect.Request[v1.Empty]) (*connect.Response[v1.Changelog], error) {
	return c.getChangelog.CallUnary(ctx, req)
}

// GetAppInfo calls info.v1.InfoService.GetAppInfo.
func (c *infoServiceClient) GetAppInfo(ctx context.Context, req *connect.Request[v1.Empty]) (*connect.Response[v1.AppInfo], error) {
	return c.getAppInfo.CallUnary(ctx, req)
}

// ReadVersion calls info.v1.InfoService.ReadVersion.
func (c *infoServiceClient) ReadVersion(ctx context.Context, req *connect.Request[v1.ReadVersionRequest]) (*connect.Response[v1.Empty], error) {
	return c.readVersion.CallUnary(ctx, req)
}

// InfoServiceHandler is an implementation of the info.v1.InfoService service.
type InfoServiceHandler interface {
	GetChangelog(context.Context, *connect.Request[v1.Empty]) (*connect.Response[v1.Changelog], error)
	GetAppInfo(context.Context, *connect.Request[v1.Empty]) (*connect.Response[v1.AppInfo], error)
	ReadVersion(context.Context, *connect.Request[v1.ReadVersionRequest]) (*connect.Response[v1.Empty], error)
}

// NewInfoServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInfoServiceHandler(svc InfoServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	infoServiceMethods := v1.File_info_v1_info_proto.Services().ByName("InfoService").Methods()
	infoServiceGetChangelogHandler := connect.NewUnaryHandler(
		InfoServiceGetChangelogProcedure,
		svc.GetChangelog,
		connect.WithSchema(infoServiceMethods.ByName("GetChangelog")),
		connect.WithHandlerOptions(opts...),
	)
	infoServiceGetAppInfoHandler := connect.NewUnaryHandler(
		InfoServiceGetAppInfoProcedure,
		svc.GetAppInfo,
		connect.WithSchema(infoServiceMethods.ByName("GetAppInfo")),
		connect.WithHandlerOptions(opts...),
	)
	infoServiceReadVersionHandler := connect.NewUnaryHandler(
		InfoServiceReadVersionProcedure,
		svc.ReadVersion,
		connect.WithSchema(infoServiceMethods.ByName("ReadVersion")),
		connect.WithHandlerOptions(opts...),
	)
	return "/info.v1.InfoService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case InfoServiceGetChangelogProcedure:
			infoServiceGetChangelogHandler.ServeHTTP(w, r)
		case InfoServiceGetAppInfoProcedure:
			infoServiceGetAppInfoHandler.ServeHTTP(w, r)
		case InfoServiceReadVersionProcedure:
			infoServiceReadVersionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedInfoServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedInfoServiceHandler struct{}

func (UnimplementedInfoServiceHandler) GetChangelog(context.Context, *connect.Request[v1.Empty]) (*connect.Response[v1.Changelog], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("info.v1.InfoService.GetChangelog is not implemented"))
}

func (UnimplementedInfoServiceHandler) GetAppInfo(context.Context, *connect.Request[v1.Empty]) (*connect.Response[v1.AppInfo], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("info.v1.InfoService.GetAppInfo is not implemented"))
}

func (UnimplementedInfoServiceHandler) ReadVersion(context.Context, *connect.Request[v1.ReadVersionRequest]) (*connect.Response[v1.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("info.v1.InfoService.ReadVersion is not implemented"))
}
