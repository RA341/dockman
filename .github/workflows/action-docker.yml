name: Action-Docker-build

on:
  workflow_call:
    inputs:
      version_tag:
        description: 'The primary version identifier (e.g., v1.2.3, a branch name like main, or a descriptive tag).'
        required: false
        type: string
      is_latest:
        description: 'Boolean to indicate if this tag should also be pushed as "latest". Typically true for main releases.'
        required: false
        type: boolean
        default: false
      source_branch:
        description: 'The name of the source Git branch (e.g., main, develop, feature/xyz). For build arguments or specific branch tagging.'
        required: true
        type: string
      title:
        type: string
        description: title for the image
        required: false
        default: "app"

jobs:
  build-and-push:
    strategy:
      fail-fast: false # Don't cancel other jobs if one fails
      matrix:
        target:
          # "default"
          - name: alpine
            suffix: ""
    #          - name: alpine-ssh
    #            suffix: -ssh

    # Give the job a dynamic name based on the matrix
    name: Build Image for (${{ matrix.target.name }})
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetches all history, tags, and branches; useful for metadata action

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Docker image tags and labels
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          # Add a flavor suffix to all tags based on the matrix
          flavor: |
            suffix=${{ matrix.target.suffix }}
            prefix=
          tags: |
            # assumes `version_tag` is valid SemVer skip tag if empty (vX.Y.Z or X.Y.Z), create major and major.minor tags.
            # Example: if version_tag is "v1.2.3", this adds "v1" and "v1.2".
            
            type=raw,value=${{ inputs.version_tag }},enable=${{ inputs.version_tag != '' }}
            type=semver,pattern=v{{major}},value=${{ inputs.version_tag }},enable=${{ inputs.version_tag != '' }}
            type=semver,pattern=v{{major}}.{{minor}},value=${{ inputs.version_tag }},enable=${{ inputs.version_tag != '' }}

            # `source_branch` input is provided add it as a tag.
            type=raw,value=${{ inputs.source_branch }},enable=${{ inputs.source_branch != '' }}            
            
            # short commit SHA tag for traceability.
            # type=sha,prefix=,suffix=,format=short,enable=${{ inputs.source_branch == 'main' }}

            # Add 'dev' tag if the source branch is 'main'.
            # type=raw,value=dev,enable=${{ inputs.source_branch == 'main' }}            
            
            # Add 'latest' tag if `is_latest` input is true.
            type=raw,value=latest,enable=${{ inputs.is_latest }}

          labels: |
            org.opencontainers.image.title=${{ inputs.title }}
            org.opencontainers.image.description=Docker image for ${{ inputs.title }} built for ${{ matrix.target.name }}.
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}

      - name: Build and push Docker image
        id: build_and_push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          # Use the target from the matrix
          target: ${{ matrix.target.name }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # platforms: "linux/amd64,linux/arm64" todo takes a long time
          cache-to: type=gha,mode=max
          cache-from: type=gha
          build-args: |
            VERSION=${{ inputs.version_tag  || steps.meta.outputs.version }}
            COMMIT_INFO=${{ github.sha }}
            BRANCH=${{ inputs.source_branch || 'unknown' }}

      - name: Echo image details
        if: success()
        run: |
          echo "üöÄ Docker image build and push complete for: ghcr.io/${{ github.repository }}"
          echo "üè∑Ô∏è Tags created:"
          echo "${{ steps.meta.outputs.tags }}"